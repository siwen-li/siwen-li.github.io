{
    "version": "https://jsonfeed.org/version/1",
    "title": "(๑•̀_•́๑)",
    "subtitle": "👻",
    "icon": "http://swsw.eu.org/assets/favicon.ico",
    "description": "没事就写一写~",
    "home_page_url": "http://swsw.eu.org",
    "items": [
        {
            "id": "http://swsw.eu.org/about/",
            "url": "http://swsw.eu.org/about/",
            "title": "",
            "date_published": "2024-04-06T15:33:37.610Z",
            "content_html": "<h1 id=\"关于\"><a class=\"anchor\" href=\"#关于\">#</a> 关于</h1>\n<h2 id=\"占个位\"><a class=\"anchor\" href=\"#占个位\">#</a> 占个位</h2>\n",
            "tags": []
        },
        {
            "id": "http://swsw.eu.org/code/python/b/",
            "url": "http://swsw.eu.org/code/python/b/",
            "title": "Python",
            "date_published": "2024-04-06T15:19:24.394Z",
            "content_html": "<h1 id=\"占个位\"><a class=\"anchor\" href=\"#占个位\">#</a> 占个位</h1>\n",
            "tags": [
                "学习",
                "Python",
                "python"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/mysql/a/",
            "url": "http://swsw.eu.org/code/mysql/a/",
            "title": "MySQL",
            "date_published": "2024-04-06T15:19:17.990Z",
            "content_html": "<h1 id=\"占个位\"><a class=\"anchor\" href=\"#占个位\">#</a> 占个位</h1>\n",
            "tags": [
                "学习",
                "MySQL",
                "sql",
                "mysql"
            ]
        },
        {
            "id": "http://swsw.eu.org/other/test/",
            "url": "http://swsw.eu.org/other/test/",
            "title": "quiz（练习题）",
            "date_published": "2024-04-06T08:31:07.000Z",
            "content_html": "<ol>\n<li class=\"quiz\">\n<p>题目 <span class=\"gap\"></span></p>\n<ul class=\"options\">\n<li>选项</li>\n<li class=\"correct\">正确选项</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>以下选项正确的是 <span class=\"gap\"></span></p>\n<ul class=\"options\">\n<li>这是选项 A</li>\n<li>这是选项 B</li>\n<li>这是选项 C</li>\n<li class=\"correct\">这是选项 D（正确答案）</li>\n</ul>\n</li>\n<li class=\"quiz multi\">\n<p>题目</p>\n<ul class=\"options\">\n<li>选项</li>\n<li class=\"correct\">正确选项</li>\n<li class=\"correct\">正确选项</li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>这里是 A 选项的注解</li>\n<li>这里是 B 选项的注解</li>\n<li>这里是 C 选项的注解</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"gap_fill\">\n<p>题目 []</p>\n<ul class=\"options\">\n<li>a</li>\n<li class=\"correct\">b</li>\n</ul>\n</li>\n</ol>\n<p>quiz:<br />\nchoice: 单选题<br />\n multiple: 多选题<br />\n true_false: 判断题<br />\n essay: 问答题<br />\n gap_fill: 填空题<br />\n mistake: 错题备注</p>\n",
            "tags": [
                "杂项"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/window_function/",
            "url": "http://swsw.eu.org/code/oracle/window_function/",
            "title": "窗口函数",
            "date_published": "2024-04-06T07:57:30.480Z",
            "content_html": "<h1 id=\"窗口函数\"><a class=\"anchor\" href=\"#窗口函数\">#</a> 窗口函数</h1>\n<blockquote>\n<p>窗口函数又叫开窗函数、分析函数，也可以称为 OLAP 函数，OLAP 是 OnLine Analytical Processing 的简称，意思是对数据库数据进行实时分析处理。</p>\n<p>窗口函数是对 where 或者 group by 子句处理后的结果进行操作，窗口函数出现在 select 子句的表达式列表中 (在 select 之前、having 之后执行)，它最显著的特点就是有 over 关键字</p>\n</blockquote>\n<h2 id=\"窗口函数与普通聚合函数的区别\"><a class=\"anchor\" href=\"#窗口函数与普通聚合函数的区别\">#</a> 窗口函数与普通聚合函数的区别</h2>\n<ul>\n<li>\n<p>聚合函数是将多条记录聚合为一条；窗口函数是每条记录都会执行，有几条记录执行完还是几条。</p>\n</li>\n<li>\n<p>窗口函数兼具 GROUP BY 子句的分组功能以及 ORDER BY 子句的排序功能。但是，PARTITION BY 子句并不具备 GROUP BY 子句的汇总功能。</p>\n</li>\n</ul>\n<h2 id=\"窗口函数解决的问题\"><a class=\"anchor\" href=\"#窗口函数解决的问题\">#</a> 窗口函数解决的问题</h2>\n<ul>\n<li>组内比较 / 组内占比</li>\n<li>累计求和</li>\n<li>TopN 问题 / 排名问题</li>\n<li>连续性问题</li>\n<li>同 / 环比问题</li>\n</ul>\n<h2 id=\"窗口函数的语法\"><a class=\"anchor\" href=\"#窗口函数的语法\">#</a> 窗口函数的语法</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> argn<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>window_expression<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"functionarg1-argn-可以是下面的函数\"><a class=\"anchor\" href=\"#functionarg1-argn-可以是下面的函数\">#</a> <strong>function (arg1,..., argn) 可以是下面的函数：</strong></h3>\n<ul>\n<li>\n<p>Aggregate Functions: 聚合函数，比如： <code>sum()</code> 、 <code> max()</code> 、 <code>min()</code> 、 <code>avg()</code>  等.</p>\n</li>\n<li>\n<p>Sort Functions: 数据排序函数，比如 ： <code>rank()</code> 、 <code>row_number()</code>  等.</p>\n</li>\n<li>\n<p>Analytics Functions: 统计和比较函数，比如： <code>lead()</code> 、 <code>lag()</code> 、  <code>first_value()</code>  等.</p>\n</li>\n</ul>\n<h3 id=\"overpartition-by-order-by\"><a class=\"anchor\" href=\"#overpartition-by-order-by\">#</a> over([partition by &lt;...&gt;] [order by &lt;....&gt;]</h3>\n<blockquote>\n<p><code>partition by</code>  按照指定字段进行分区 (分组)</p>\n<p><code>order by</code>  将各个分区内的数据按照指定规则进行排序</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"./assets/window_fun1.png\" alt=\"window_fun1\" /><br />\n&lt;p?&gt;123</p><br />\n<img loading=\"lazy\" data-src=\"./assets/window_fun1.png\"/></p>\n<h3 id=\"window_expression-确定窗口边界\"><a class=\"anchor\" href=\"#window_expression-确定窗口边界\">#</a> <strong>window_expression 确定窗口边界</strong></h3>\n<blockquote>\n<p>窗口边界主要用于对  <code>partition by</code>  的分组结果做进一步限制，并定位出限制后的运算范围</p>\n</blockquote>\n<p><strong>窗口边界常用关键字</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名词</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">preceding</td>\n<td style=\"text-align:left\">往前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">following</td>\n<td style=\"text-align:left\">往后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">current row</td>\n<td style=\"text-align:left\">当前行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unbounded</td>\n<td style=\"text-align:left\">起点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unbounded preceding</td>\n<td style=\"text-align:left\">从前面的起点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unbounded following</td>\n<td style=\"text-align:left\">到后面的终点</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"窗口边界使用详解\"><a class=\"anchor\" href=\"#窗口边界使用详解\">#</a> <strong>窗口边界使用详解</strong></h4>\n<p><img loading=\"lazy\" data-src=\"./assets/window_fun2.png\" alt=\"window_fun2\" /></p>\n<blockquote>\n<p>如果没有  <code>partition by</code>  子句 则不进行分区 或者说所有数据作为一个分区</p>\n<p>如果没有  <code>order by</code>  子句 则不进行排序 (与顺序有关的函数要求必须具备 order by 子句)</p>\n<p>如果没有  <code>order by</code>  子句 则默认窗口范围为  <code>rows between unbounded preceding and unbounded following</code>  即整个分区</p>\n<p>如果有  <code>order by</code>  子句 则默认窗口范围为  <code>range between unbounded preceding and current row</code>  即分区内第一行的值到当前行的值 (值范围)</p>\n</blockquote>\n<p><strong> <code>rows</code>  和  <code>range</code>  的区别</strong></p>\n<blockquote>\n<p><code>rows</code>  表示的是行</p>\n<p><code>range</code>  表示的是值</p>\n</blockquote>\n<h2 id=\"窗口函数的计算过程语法中每个部分都是可选的\"><a class=\"anchor\" href=\"#窗口函数的计算过程语法中每个部分都是可选的\">#</a> <strong>窗口函数的计算过程（语法中每个部分都是可选的）</strong></h2>\n<ul>\n<li>按窗口定义，将所有输入数据分区、再排序（如果需要的话）</li>\n<li>对每一行数据，计算它的窗口范围</li>\n<li>将窗口内的行集合输入窗口函数，计算结果填入当前行</li>\n</ul>\n<h2 id=\"窗口函数的分类\"><a class=\"anchor\" href=\"#窗口函数的分类\">#</a> 窗口函数的分类</h2>\n<h3 id=\"窗口聚合函数\"><a class=\"anchor\" href=\"#窗口聚合函数\">#</a> <strong>窗口聚合函数</strong></h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sum()</td>\n<td style=\"text-align:left\">求和</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">avg()</td>\n<td style=\"text-align:left\">求平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max()</td>\n<td style=\"text-align:left\">求最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">min()</td>\n<td style=\"text-align:left\">求最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">count()</td>\n<td style=\"text-align:left\">计数</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>大多数聚合函数都可以加上 over () I 子句用作窗口函数 具体支持可自行验证</p>\n<p>聚合函数用作窗口函数时也会忽略 null 值</p>\n</blockquote>\n<h4 id=\"排名窗口函数\"><a class=\"anchor\" href=\"#排名窗口函数\">#</a> <strong>排名窗口函数</strong></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">row_number()</td>\n<td style=\"text-align:left\">排名，序号连续，同值不同号  如: 1 2 3 4 5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rank()</td>\n<td style=\"text-align:left\">排名，序号可能不连续，同值同号，下一个会跳号排序  如: 1 2 2 4 5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dense_rank()</td>\n<td style=\"text-align:left\">dense_rank 函数的功能与 rank 函数类似，dense_rank 函数在生成序号时是连续的，而 rank 函数生成的序号有可能不连续。当出现名次相同时，则排名序号也相同。而下一个排名的序号与上一个排名序号是连续的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">percent_rank()</td>\n<td style=\"text-align:left\">计算给定行的百分比排名。可以用来计算超过了百分之多少的人；排名计算公式为：(当前行的 rank 值 - 1)/(分组内的总行数 - 1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cume_dist()</td>\n<td style=\"text-align:left\">计算某个窗口或分区中某个值的累积分布。假定升序排序，则使用以下公式确定累积分布：小于等于当前值 x 的行数 / 窗口或 partition 分区内的总行数。其中，x 等于 order by 子句中指定的列的当前行中的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ntile()</td>\n<td style=\"text-align:left\">已排序的行划分为大小尽可能相等的指定数量的排名的组，并返回给定行所在的组的排名。如果切片不均匀，默认增加第一个切片的分布，不支持 ROWS BETWEEN</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"值窗口函数\"><a class=\"anchor\" href=\"#值窗口函数\">#</a> <strong>值窗口函数</strong></h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">窗口函数</th>\n<th style=\"text-align:left\">函数功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">lag()</td>\n<td style=\"text-align:left\">与 lead 相反，用于统计窗口内往上第 n 行值。第一个参数为列名，第二个参数为往上第 n 行（可选，默认为 1），第三个参数为默认值（当往上第 n 行为 NULL 时候，取默认值，如不指定，则为 NULL.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lead()</td>\n<td style=\"text-align:left\">用于统计窗口内往下第 n 行值。第一个参数为列名，第二个参数为往下第 n 行（可选，默认为 1），第三个参数为默认值（当往下第 n 行为 NULL 时候，取默认值，如不指定，则为 NULL.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">first_value()</td>\n<td style=\"text-align:left\">取分组内排序后，截止到当前行，第一个值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">last_value()</td>\n<td style=\"text-align:left\">取分组内排序后，截止到当前行，最后一个值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nth_value()</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用窗口函数实现环比计算\"><a class=\"anchor\" href=\"#使用窗口函数实现环比计算\">#</a> <strong>使用窗口函数实现环比计算</strong></h3>\n<blockquote>\n<p>什么是环比、什么是同比？</p>\n<p>与上年度数据对比称 &quot;同比&quot;，与上月数据对比称 &quot;环比&quot;</p>\n<p>相关公式如下：同比增长率计算公式：(当年值 - 上年值)/ 上年值 x100%</p>\n<p>环比增长率计算公式：(当月值 - 上月值)/ 上月值 x100%</p>\n</blockquote>\n",
            "tags": [
                "学习",
                "Oracle",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/REGEXP_SUBSTR/",
            "url": "http://swsw.eu.org/code/oracle/REGEXP_SUBSTR/",
            "title": "REGEXP_SUBSTR",
            "date_published": "2024-04-06T07:57:30.479Z",
            "content_html": "<h1 id=\"regexp_substr\"><a class=\"anchor\" href=\"#regexp_substr\">#</a> REGEXP_SUBSTR</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/regexp_substr.gif\" alt=\"REGEXP_SUBSTR 函数语法\" /></p>\n<p>=== &quot;用途&quot;<br />\n!!! note&quot; 用途 &quot;</p>\n<pre><code>    `REGEXP_SUBSTR` 通过允许您在字符串中搜索正则表达式模式来扩展 `SUBSTR` 函数的功能。它与 `REGEXP_INSTR` 类似, 但是它返回匹配子字符串本身, 而不是返回子字符串的位置。\n</code></pre>\n<p>=== &quot;参数说明&quot;<br />\n!!! abstract annotate&quot; 参数 &quot;</p>\n<pre><code>    - `source_char` 是字符表达式, 用作搜索值。\n    - `pattern` 是正则表达式。它通常是一个文本字面量。\n    - `position` 是一个正整数, 指示 Oracle 应开始搜索 `source_char` 的字符位置。默认值为 1。\n    - `occurrence` 是一个正整数, 指示 Oracle 应在 `source_char` 中搜索 `pattern` 的第几次出现。默认值为 1。 (1)\n    - `match_param` 是 `VARCHAR2` 或 `CHAR` 数据类型的字符表达式, 它允许您更改函数的默认匹配行为。\n    - 对于具有子表达式的 `pattern`, `subexpr` 是一个非负整数, 范围从 0 到 9, 用于指示函数应返回 `pattern` 中的哪个子表达式。\n  \n1.  如果 `occurrence` 大于 1, 则数据库会从第一个 `pattern` 匹配之后的第一个字符开始搜索第二次出现, 依此类推。\n</code></pre>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>搜索以逗号开头后跟一个或多个非逗号字符最后以逗号结尾的字符串。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_substr<span class=\"token punctuation\">(</span><span class=\"token string\">'500 Oracle Parkway, Redwood Shores, CA'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     <span class=\"token string\">',[^,]+,'</span><span class=\"token punctuation\">)</span> REGEXPR_SUBSTR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXPR_SUBSTR<br />\n-----------------<br />\n, Redwood Shores,</li>\n</ol>\n<p>在  <code>http://</code>  和斜杠 ( <code>/</code> ) 或字符串末尾之间搜索此子字符串的最小 3 次和最大 4 次出现。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_substr<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.example.com/products'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     <span class=\"token string\">'http://([[:alnum:]]+\\.?)&#123;3,4&#125;/?'</span><span class=\"token punctuation\">)</span> REGEXP_SUBSTR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\n----------------------<br />\n<a href=\"http://www.example.com/\">http://www.example.com/</a></li>\n</ol>\n<p>返回  <code>pattern</code>  中的第四个子表达式:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_substr<span class=\"token punctuation\">(</span><span class=\"token string\">'1234567890'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(123)(4(56)(78))'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> REGEXP_SUBSTR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_SUBSTR<br />\n-------------------<br />\n78</li>\n</ol>\n<p>从字符串中提取数字和字母:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> strings <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'ABC123'</span> str <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'A1B2C3'</span> str <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'123ABC'</span> str <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'1A2B3C'</span> str <span class=\"token keyword\">from</span> dual   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> regexp_substr<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'[0-9]'</span><span class=\"token punctuation\">)</span>      First_Occurrence_of_Number</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_substr<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'[0-9].*'</span><span class=\"token punctuation\">)</span>    Num_Followed_by_String</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_substr<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z][0-9]'</span><span class=\"token punctuation\">)</span> Letter_Followed_by_String</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> strings<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nFIRST_OCCURRENCE_OF_NUMB NUM_FOLLOWED_BY_STRING   LETTER_FOLLOWED_BY_STRIN<br />\n------------------------ ------------------------ ------------------------<br />\n1\t\t\t                      123\t\t\t                   C1<br />\n1\t\t\t                      1B2C3\t\t\t                   A1<br />\n1\t\t\t                      123ABC<br />\n1\t\t\t                      1A2B3C \t\t                   A2</li>\n</ol>\n<p>截取 HTML 第一个标签中的内容:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_substr<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>RegexLean&lt;/h1>'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token string\">'&lt;(\\w+)>(.*)&lt;/\\1>'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> STR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nSTR<br />\n---------<br />\nRegexLean</li>\n</ol>\n<p>获取 tmp_area 表中的市级区域和最小的区域:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tmp_area <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">select</span> <span class=\"token string\">'贵州省-安顺市-西秀区-大西桥镇'</span> area <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">select</span> <span class=\"token string\">'广东省-深圳市-龙岗区'</span> area <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">select</span> <span class=\"token string\">'内蒙古-呼和浩特市'</span> area <span class=\"token keyword\">from</span> dual</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> regexp_substr<span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">,</span> <span class=\"token string\">'[^-]+'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>                           CITY_AREA</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_substr<span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">,</span> <span class=\"token string\">'[^-]+'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">,</span> <span class=\"token string\">'[^-]+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> MIN_AREA1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_replace<span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">,</span> <span class=\"token string\">'.*-(.*)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\1'</span><span class=\"token punctuation\">)</span>                        MIN_AREA2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> tmp_area<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nCITY_AREA                   MIN_AREA1                   MIN_AREA2<br />\n--------------------------- --------------------------- ---------------------------<br />\n 安顺市                       大西桥镇                     大西桥镇<br />\n深圳市                       龙岗区                       龙岗区<br />\n呼和浩特市                   呼和浩特市                    呼和浩特市</li>\n</ol>\n",
            "tags": [
                "学习",
                "Oracle",
                "regexp",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/SYS_CONNECT_BY_PATH/",
            "url": "http://swsw.eu.org/code/oracle/SYS_CONNECT_BY_PATH/",
            "title": "SYS_CONNECT_BY_PATH",
            "date_published": "2024-04-06T07:57:30.479Z",
            "content_html": "<h1 id=\"sys_connect_by_path\"><a class=\"anchor\" href=\"#sys_connect_by_path\">#</a> SYS_CONNECT_BY_PATH</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/sys_connect_by_path.gif\" alt=\"SYS_CONNECT_BY_PATH 语法\" /></p>\n<div class=\"admonition note\"><p class=\"admonition-title\">用途\n</p><p><code>SYS_CONNECT_BY_PATH</code> 仅在层次查询中有效。它返回从根到节点的列值路径, 用 <code>char</code> 为每个由 <code>CONNECT BY</code> 条件返回的行分隔列值。<code>column</code> 和 <code>char</code> 都可以是任何数据类型。</p>\n</div>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>返回从员工  <code>Kochhar</code>  到所有  <code>Kochhar</code>  的员工 (及其员工) 的员工姓名路径:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> LPAD<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> sys_connect_by_path<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Path\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employees </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Kochhar'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Path</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">------------------------------</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Greenberg<span class=\"token operator\">/</span>Chen</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Greenberg<span class=\"token operator\">/</span>Faviet</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Greenberg<span class=\"token operator\">/</span>Popp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Greenberg<span class=\"token operator\">/</span>Sciarra</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Greenberg<span class=\"token operator\">/</span>Urman</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Higgins<span class=\"token operator\">/</span>Gietz</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Baer</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Greenberg</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Higgins</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Mavris</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Whalen</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token operator\">/</span>Kochhar</pre></td></tr></table></figure>",
            "tags": [
                "学习",
                "Oracle",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/REGEXP_REPLACE/",
            "url": "http://swsw.eu.org/code/oracle/REGEXP_REPLACE/",
            "title": "REGEXP_REPLACE",
            "date_published": "2024-04-06T07:57:30.478Z",
            "content_html": "<h1 id=\"regexp_replace\"><a class=\"anchor\" href=\"#regexp_replace\">#</a> REGEXP_REPLACE</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/regexp_replace.gif\" alt=\"REGEXP_REPLACE 函数语法\" /></p>\n<p>=== &quot;用途&quot;<br />\n!!! note&quot; 用途 &quot;</p>\n<pre><code>    `REGEXP_REPLACE` 通过允许您在字符串中搜索正则表达式模式来扩展 `REPLACE` 函数的功能。默认情况下, 该函数返回 `source_char`, 并用 `replace_string` 替换正则表达式模式的每次出现。\n</code></pre>\n<p>=== &quot;参数说明&quot;<br />\n!!! abstract annotate&quot; 参数 &quot;</p>\n<pre><code>    - `source_char` 是字符表达式, 用作搜索值。\n    - `pattern` 是正则表达式。通常是一个文本字面量。\n    - `replace_string` 是字符类型的值。`replace_string` 可以包含最多 500 个对子表达式的反向引用, 形式为 `\\n`, 其中 `n` 是 1 到 9 之间的数字。如果要在 `replace_string` 中包含反斜杠(`\\`), 则必须在前面加上转义字符, 也是一个反斜杠。\n    - `position` 是一个正整数, 指示 Oracle 应开始搜索 `source_char` 的字符位置。默认为 1。 \n    - `occurrence` 是一个非负整数, 指示替换操作的出现次数。 (1)\n    - `match_param` 是 `VARCHAR2` 或 `CHAR` 数据类型的字符表达式, 它允许您更改函数的默认匹配行为。\n\n1.  - 如果指定 0, 则 Oracle 替换所有匹配项。这是默认值。\n    - 如果指定一个正整数 `n`, 则 Oracle 替换第 `n` 次出现。\n    - 如果 `occurrence` 大于 1, 则数据库从第一个 `pattern` 匹配后的第一个字符开始搜索第二次出现, 依此类推。\n</code></pre>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>用单个空格替换每个两个或多个空格的出现。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'500   Oracle     Parkway,    Redwood  Shores, CA'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token string\">' &#123;2,&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"REGEXP_REPLACE\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_REPLACE<br />\n--------------------------------------<br />\n500 Oracle Parkway, Redwood Shores, CA</li>\n</ol>\n<p>替换字符串中的所有数字，第一个出现的数字，第二个出现的数字:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'a1b2c3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[0-9]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>       S1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'a1b2c3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[0-9]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> S2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'a1b2c3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[0-9]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> S3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nS1  S2    S3<br />\n--- ----- -----<br />\nabc ab2c3 a1bc3</li>\n</ol>\n<p>用单个空格替换字符串中的连续空格:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' &#123;2,&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> S1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello        World'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' &#123;2,&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> S2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello  World   !'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' &#123;2,&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> S3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nS1          S2          S3<br />\n----------- ----------- -------------<br />\nHello World Hello World Hello World !</li>\n</ol>\n<p>用数字 8 替换字符串中所有字母:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'abc123DEF6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[a-z]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span> STR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nSTR<br />\n----------<br />\n8881238886</li>\n</ol>\n<p>在字符串中的每个字符后面插入一个空格。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'helloworld!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(.)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\1 '</span><span class=\"token punctuation\">)</span> REGEXP_REPLACE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_REPLACE<br />\n----------------------<br />\nh e l l o w o r l d !</li>\n</ol>\n<p>将  <code>xxx.xxx.xxxx</code>  模式的电话号码，使用  <code>(xxx) xxxx-xxx</code>  重新格式化。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span>phone_number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token string\">'(\\d&#123;3&#125;)\\.(\\d&#123;3&#125;)\\.(\\d&#123;4&#125;)'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token string\">'(\\1) \\2-\\3'</span><span class=\"token punctuation\">)</span> REGEXP_REPLACE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> REGEXP_REPLACE<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_REPLACE<br />\n--------------------------------------------------------------------------------<br />\n(515) 123-4444<br />\n(515) 123-4567<br />\n(515) 123-4568<br />\n(515) 123-4569<br />\n(515) 123-5555<br />\n. . .</li>\n</ol>\n<p>将驼峰字符串转换为包含下划线分隔的小写单词的字符串:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> strings <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'AddressLine1'</span> s <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'ZipCode'</span> s <span class=\"token keyword\">from</span> dual <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token string\">'Country'</span> s <span class=\"token keyword\">from</span> dual  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> s                                                STRING</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">,</span> lower<span class=\"token punctuation\">(</span>regexp_replace<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'([A-Z0-9])'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_\\1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> MODIFIED_STRING</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> strings<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nSTRING               MODIFIED_STRING<br />\n-------------------- --------------------<br />\nAddressLine1         address_line_1<br />\nZipCode              zip_code<br />\nCountry              country</li>\n</ol>\n<p>截取 HTML 第一个标签中的内容:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>RegexLean&lt;/h1>'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token string\">'&lt;(\\w+)>(.*)&lt;/\\1>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\2'</span><span class=\"token punctuation\">)</span> STR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nSTR<br />\n---------<br />\nRegexLean</li>\n</ol>\n<p>将连续出现两次以上相同的单词字符替换为一个:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_replace<span class=\"token punctuation\">(</span><span class=\"token string\">'aabbcccDefg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(\\w)\\1+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\1'</span><span class=\"token punctuation\">)</span> STR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nSTR<br />\n-------<br />\nabcDefg</li>\n</ol>\n",
            "tags": [
                "学习",
                "Oracle",
                "regexp",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/REGEXP_LIKE/",
            "url": "http://swsw.eu.org/code/oracle/REGEXP_LIKE/",
            "title": "REGEXP_LIKE",
            "date_published": "2024-04-06T07:57:30.477Z",
            "content_html": "<h1 id=\"regexp_like\"><a class=\"anchor\" href=\"#regexp_like\">#</a> REGEXP_LIKE</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/regexp_like_condition.gif\" alt=\"regexp_like_condition 语法\" /></p>\n<p>=== &quot;用途&quot;<br />\n!!! note&quot; 用途 &quot;</p>\n<pre><code>    `regexp_like` 与 `like` 条件类似, 但是 `regexp_like` 执行正则表达式匹配而不是 `like` 执行的简单模式匹配。 此条件使用输入字符集定义的字符来评估字符串。\n</code></pre>\n<p>=== &quot;参数说明&quot;<br />\n!!! abstract annotate&quot; 参数 &quot;</p>\n<pre><code>    - `source_char` 是用作搜索值的字符表达式，通常是一个字符列。 \n    - `pattern` 是正则表达式，通常是一个文本字面量。\n    - `match_param` 指定匹配规则。 (1)  \n\n1.  `match_param` 的值可以包含以下一个或多个字符:\n    - `'i'` 指定不区分大小写的匹配。\n    - `'c'` 指定区分大小写和重音符号的匹配。\n    - `'n'` 允许句点(.)这个通配符匹配换行符。\n    - `'m'` 将源字符串视为多行。\n    - `'x'` 忽略空白字符。\n    如果 `match_param` 的值包含多个相互矛盾的字符, 则 Oracle 使用最后一个字符。\n    如果省略 `match_param`, 则:\n    &gt; 默认的大小写敏感性和重音符敏感性由 `pattern` 决定。&lt;br&gt;\n    &gt; 句点(.)不匹配换行符。&lt;br&gt;\n    &gt; 源字符串被视为单行。\n</code></pre>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>返回第一个名字为 Steven 或 Stephen (其中  <code>first_name</code>  以  <code>Ste</code>  开头并以  <code>en</code>  结尾，中间是  <code>v</code>  或  <code>ph</code> ) 的员工的名字和姓:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> first_name<span class=\"token punctuation\">,</span> last_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> regexp_like<span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'^Ste(v|ph)en$'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nFIRST_NAME           LAST_NAME<br />\n-------------------- -------------------------<br />\nStephen              Stiles<br />\nSteven               King<br />\nSteven               Markle</li>\n</ol>\n<p>返回姓中包含两个相邻的  <code>a</code> 、 <code>e</code> 、 <code>i</code> 、 <code>o</code>  或  <code>u</code>  的员工的姓 (不区分大小写):</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> last_name   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> regexp_like<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'([aeiou])\\1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> last_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nLAST_NAME<br />\n-------------------------<br />\nBloom<br />\nDe Haan<br />\nFeeney<br />\nGee<br />\nGreenberg<br />\nGreene<br />\nKhoo<br />\nLee</li>\n</ol>\n",
            "tags": [
                "学习",
                "Oracle",
                "regexp",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/REGEXP_INSTR/",
            "url": "http://swsw.eu.org/code/oracle/REGEXP_INSTR/",
            "title": "REGEXP_INSTR",
            "date_published": "2024-04-06T07:57:30.476Z",
            "content_html": "<h1 id=\"regexp_instr\"><a class=\"anchor\" href=\"#regexp_instr\">#</a> REGEXP_INSTR</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/regexp_instr.gif\" alt=\"REGEXP_INSTR 函数语法\" /></p>\n<p>=== &quot;用途&quot;<br />\n!!! note&quot; 用途 &quot;</p>\n<pre><code>    `regexp_instr` 函数允许您在字符串中搜索正则表达式模式来扩展 `instr` 函数的功能。该函数使用输入字符集定义的字符来评估字符串。它返回一个整数, 表示匹配子字符串的开始位置或结束位置, 具体取决于 `return_option` 参数的值。如果未找到匹配, 则函数返回 0。\n</code></pre>\n<p>=== &quot;参数说明&quot;<br />\n!!! abstract annotate&quot; 参数 &quot;</p>\n<pre><code>    - `source_char` 是字符表达式, 用作搜索值。\n    - `pattern` 是正则表达式。通常是一个文本字面量。\n    - `position` 是一个正整数, 指示 Oracle 应开始搜索 `source_char` 的字符位置。默认值为 1。\n    - `occurrence` 是一个正整数, 指示 Oracle 应在 `source_char` 中搜索 `pattern` 的第几次出现。默认值为 1, 表示 Oracle 搜索 `pattern` 的第一次出现。如果 `occurrence` 大于 1, 则数据库会从第一个 `pattern` 匹配之后的第一个字符开始搜索第二次出现, 依此类推。\n    - `return_option` 允许您指定 Oracle 应该返回与出现相关的内容。 (1)\n    - `match_param` 指定匹配规则。 此参数对此函数的行为与 [`REGEXP_COUNT`](./REGEXP_COUNT.md) 中的行为相同。\n    - 对于具有子表达式的 `pattern`, `subexpr` 是一个介于 0 到 9 之间的整数, 指示 `pattern` 中作为函数目标的子表达式。 `subexpr` 是由圆括号括起来的 `pattern` 片段。子表达式可以嵌套。子表达式按它们的左括号在 `pattern` 中出现的顺序进行编号。 (2)\n\n1.  - 如果指定 0, 则 Oracle 返回出现的第一个字符的位置。这是默认值。\n    - 如果指定 1, 则 Oracle 返回出现之后的字符的位置。\n2.  例如, 考虑以下表达式:\n    ```\n    0123(((abc)(de)f)ghi)45(678)\n    ```\n    此表达式具有以下顺序的 5 个子表达式: “abcdefghi”,“abcdef”,“abc”,“de”和“678”。\n    - 如果 `subexpr` 为零, 则返回与 `pattern` 匹配的整个子字符串的位置。\n    - 如果 `subexpr` 大于零, 则返回与 `pattern` 中编号为 `subexpr` 的子表达式对应的子字符串片段在匹配子字符串中的位置。\n    - 如果 `pattern` 没有至少 `subexpr` 个子表达式, 则函数返回零。\n    - 空 `subexpr` 值返回 `NULL`。\n    - `subexpr` 的默认值为零。\n</code></pre>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>从字符串中的第一个字符开始搜索，并返回找到的第六次出现一个或多个非空格字符的起始位置。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_instr<span class=\"token punctuation\">(</span><span class=\"token string\">'500 Oracle Parkway, Redwood Shores, CA'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token string\">'[^ ]+'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> REGEXP_INSTR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_INSTR<br />\n------------<br />\n37</li>\n</ol>\n<p>从字符串的第三个字符开始搜索，并返回字符串中第二个出现的以  <code>s</code> 、 <code>r</code>  或  <code>p</code>  开头的七个字母的单词之前 / 后的位置。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_instr<span class=\"token punctuation\">(</span><span class=\"token string\">'500 Oracle Parkway, Redwood Shores, CA'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token string\">'[s|r|p][[:alpha:]]&#123;6&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span> REGEXP_INSTR1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_instr<span class=\"token punctuation\">(</span><span class=\"token string\">'500 Oracle Parkway, Redwood Shores, CA'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token string\">'[s|r|p][[:alpha:]]&#123;6&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span> REGEXP_INSTR2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_INSTR1 REGEXP_INSTR2<br />\n------------- -------------<br />\n21            28</li>\n</ol>\n<p>使用  <code>subexpr</code>  参数在  <code>pattern</code>  中搜索特定的子表达式。第一个语句返回源字符串中第一个子表达式的第三个字符的位置，即 '56':</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_instr<span class=\"token punctuation\">(</span><span class=\"token string\">'1234567890'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(123)(4(56)(78))'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> REGEXP_INSTR</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_INSTR<br />\n------------<br />\n5</li>\n</ol>\n<p>查询邮箱列并搜索有效的邮箱地址:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_instr<span class=\"token punctuation\">(</span><span class=\"token string\">'johndoe@example'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\w+@\\w+(\\.\\w+)+'</span><span class=\"token punctuation\">)</span>     IS_A_VALID_EMAIL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_instr<span class=\"token punctuation\">(</span><span class=\"token string\">'johndoe@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\w+@\\w+(\\.\\w+)+'</span><span class=\"token punctuation\">)</span> IS_A_VALID_EMAIL</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> regexp_temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nIS_A_VALID_EMAIL IS_A_VALID_EMAIL<br />\n---------------- ----------------<br />\n0                1</li>\n</ol>\n",
            "tags": [
                "学习",
                "Oracle",
                "regexp",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/REGEXP_COUNT/",
            "url": "http://swsw.eu.org/code/oracle/REGEXP_COUNT/",
            "title": "REGEXP_COUNT",
            "date_published": "2024-04-06T07:57:30.475Z",
            "content_html": "<h1 id=\"regexp_count\"><a class=\"anchor\" href=\"#regexp_count\">#</a> REGEXP_COUNT</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/regexp_count.gif\" alt=\"regexp_count 函数语法\" /></p>\n<p>=== &quot;用途&quot;<br />\n!!! note annotate&quot; 用途 &quot;</p>\n<pre><code>    `regexp_count` 函数补充了 [regexp_instr](./REGEXP_INSTR.md) 函数的功能, 它返回模式在源字符串中出现的次数。该函数使用字符集定义的字符来评估字符串。它返回一个整数, 表示 `pattern` 出现的次数。如果未找到匹配, 则该函数返回 0。 (1)\n\n1.  `regexp_count` 忽略 `pattern` 中的子表达式括号。\n</code></pre>\n<p>=== &quot;参数说明&quot;<br />\n!!! abstract annotate&quot; 参数 &quot;</p>\n<pre><code>    - `source_char` 是用作搜索值的字符表达式，通常是一个字符列。 \n    - `pattern` 是正则表达式，通常是一个文本字面量。\n    - `position` 是一个正整数, 指示 Oracle 应开始搜索 `source_char` 的字符位置。默认为 1。 \n    - `match_param` 指定匹配规则。 (1)  \n\n1.  `match_param` 的值可以包含以下一个或多个字符:\n    - `'i'` 指定不区分大小写的匹配。\n    - `'c'` 指定区分大小写和重音符号的匹配。\n    - `'n'` 允许句点(.)这个通配符匹配换行符。\n    - `'m'` 将源字符串视为多行。\n    - `'x'` 忽略空白字符。\n    如果 `match_param` 的值包含多个相互矛盾的字符, 则 Oracle 使用最后一个字符。\n    如果省略 `match_param`, 则:\n    &gt; 默认的大小写敏感性和重音符敏感性由 `pattern` 决定。&lt;br&gt;\n    &gt; 句点(.)不匹配换行符。&lt;br&gt;\n    &gt; 源字符串被视为单行。\n</code></pre>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>验证提供的字符串是否符合给定的模式，并返回匹配的数量:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'ABC123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z]'</span><span class=\"token punctuation\">)</span> Match1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'A1B2C3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\w+'</span><span class=\"token punctuation\">)</span> Match2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nMATCH1     MATCH2<br />\n---------- ----------<br />\n3          1</li>\n</ol>\n<p>从第三个字符开始评估源字符串，跳过了第一个模式的出现:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'abcabcABCABC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span> MATCH1 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'abcabcABCABC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span> MATCH2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nMATCH1     MATCH2<br />\n---------- ----------<br />\n3          2</li>\n</ol>\n<p>模式中的子表达式括号会被忽略:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'abcabcabcabcabc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(ab)c'</span><span class=\"token punctuation\">)</span> REGEXP_COUNT</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nREGEXP_COUNT<br />\n------------<br />\n5</li>\n</ol>\n<p>验证提供的字符串是否符合给定的模式，并返回字母字符后跟单个数字的数量:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'ABC123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z][0-9]'</span><span class=\"token punctuation\">)</span> Match1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'A1B2C3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z][0-9]'</span><span class=\"token punctuation\">)</span> Match2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nMATCH1     MATCH2<br />\n---------- ----------<br />\n1          3</li>\n</ol>\n<p>验证提供的字符串是否符合给定的模式，并返回仅在字符串开头的字母字符后跟单个数字的数量:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'ABC123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^[A-Z][0-9]'</span><span class=\"token punctuation\">)</span> MATCH1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'A1B2C3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^[A-Z][0-9]'</span><span class=\"token punctuation\">)</span> MATCH2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nMATCH1     MATCH2<br />\n---------- ----------<br />\n0          1</li>\n</ol>\n<p>验证提供的字符串是否符合给定的模式，并返回仅包含在字符串中的字母字符后跟两个数字的数量:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'ABC123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z][0-9]&#123;2&#125;'</span><span class=\"token punctuation\">)</span> MATCH1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'A1B2C3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z][0-9]&#123;2&#125;'</span><span class=\"token punctuation\">)</span> MATCH2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nMATCH1     MATCH2<br />\n---------- ----------<br />\n1          0</li>\n</ol>\n<p>验证提供的字符串是否符合给定的模式，并返回从字符串开头算起的前两个匹配中的字母字符后跟单个数字的数量:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'ABC12D3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'([A-Z][0-9])&#123;2&#125;'</span><span class=\"token punctuation\">)</span> MATCH1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> regexp_count<span class=\"token punctuation\">(</span><span class=\"token string\">'A1B2C3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'([A-Z][0-9])&#123;2&#125;'</span><span class=\"token punctuation\">)</span>  MATCH2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> dual<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li>!!! quote &quot;&quot;<br />\nMATCH1     MATCH2<br />\n---------- ----------<br />\n0          1</li>\n</ol>\n",
            "tags": [
                "学习",
                "Oracle",
                "regexp",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/Oracle_regular_expression/",
            "url": "http://swsw.eu.org/code/oracle/Oracle_regular_expression/",
            "title": "oracle 正则表达式",
            "date_published": "2024-04-06T07:57:30.474Z",
            "content_html": "<h1 id=\"oracle-正则表达式\"><a class=\"anchor\" href=\"#oracle-正则表达式\">#</a> oracle 正则表达式</h1>\n<p>!!! tip inline &quot;tip&quot;</p>\n<pre><code>**正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子**\n</code></pre>\n<blockquote>\n<p><em>推荐学习站点：</em></p>\n<ul>\n<li><a href=\"https://regexlearn.com/zh-cn/playground\">Regex Learn - Playground</a></li>\n<li><a href=\"https://regex101.com/\">regex101: build, test, and debug regex</a></li>\n<li><a href=\"https://livesql.oracle.com/apex/f?p=590:1:5368669717156:::RP::\">Oracle Live SQL</a></li>\n</ul>\n</blockquote>\n<br>\n### 正则表达式运算符和元符号\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td>反斜杠字符在不同的上下文中可以有四种不同的含义。它可以: <br> 代表自身 <br> 转义下一个字符 <br> 引入一个运算符 <br> 不做任何操作</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配零次或多次出现的字符</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配一次或多次出现的字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配零次或一次出现的字符</td>\n</tr>\n<tr>\n<td>|</td>\n<td>表示替代匹配的选择运算符</td>\n</tr>\n<tr>\n<td>^</td>\n<td>默认匹配字符串的开始位置。在多行模式下，匹配源字符串中任意一行的开始位置。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>默认匹配字符串的结束位置。在多行模式下，匹配源字符串中任意一行的结束位置。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配支持的字符集中任意字符，空字符除外</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>用来指定一个匹配列表，列表中的表达式只要匹配到其中一个就算成功。非匹配列表以 ^ 开头，指定不匹配列表中的所有字符。要在列表中指定右中括号], 请将其放在首位 (紧跟着起始的 ^ 符号之后，如果存在的话)。要在列表中指定连字符 -, 请将其放在首位、末位或作为一个范围的结束。</td>\n</tr>\n<tr>\n<td>( )</td>\n<td>分组表达式，作为一个整体单独子表达式对待</td>\n</tr>\n<tr>\n<td m=\"\"></td>\n<td>精确匹配 m 次</td>\n</tr>\n<tr>\n<td m,=\"\"></td>\n<td>至少匹配 m 次</td>\n</tr>\n<tr>\n<td m,=\"\" n=\"\"></td>\n<td>至少匹配 m 次，但不超过 n 次</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>反向引用表达式 (n 是一个 1 到 9 之间的数字), 匹配从左边第 n 个被括号括起来的子表达式</td>\n</tr>\n<tr>\n<td>[..]</td>\n<td>指定字符类别 (例如 [: alpha:])。匹配指定字符类别中的任意字符。</td>\n</tr>\n<tr>\n<td>[==]</td>\n<td>指定等价类。例如 [= a =] 匹配所有基本字母是 a 的字符。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"oracle-正则表达式中受-perl-影响的运算符\"><a class=\"anchor\" href=\"#oracle-正则表达式中受-perl-影响的运算符\">#</a> Oracle 正则表达式中受 Perl 影响的运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>非单词字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空白字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>非空白字符</td>\n</tr>\n<tr>\n<td>\\A</td>\n<td>只匹配字符串开始位置，或在字符串结束时匹配在字符串末尾的换行符前</td>\n</tr>\n<tr>\n<td>\\Z</td>\n<td>只匹配字符串结束位置</td>\n</tr>\n<tr>\n<td>*?</td>\n<td>匹配前面的模式元素 0 次或多次 (非贪婪匹配)</td>\n</tr>\n<tr>\n<td>+?</td>\n<td>匹配前面的模式元素 1 次或多次 (非贪婪匹配)</td>\n</tr>\n<tr>\n<td>??</td>\n<td>匹配前面的模式元素 0 次或 1 次 (非贪婪匹配)</td>\n</tr>\n<tr>\n<td>{n}?</td>\n<td>精确匹配前面的模式元素 n 次 (非贪婪匹配)</td>\n</tr>\n<tr>\n<td>{n,}?</td>\n<td>至少匹配前面的模式元素 n 次 (非贪婪匹配)</td>\n</tr>\n<tr>\n<td>{n, m}?</td>\n<td>至少匹配前面的模式元素 n 次，但不超过 m 次 (非贪婪匹配)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符集\"><a class=\"anchor\" href=\"#字符集\">#</a> 字符集</h3>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[:alpha:]]</td>\n<td>任意字母</td>\n</tr>\n<tr>\n<td>[[:digit:]]</td>\n<td>任意数字</td>\n</tr>\n<tr>\n<td>[[:alnum:]]</td>\n<td>任意字母和数字</td>\n</tr>\n<tr>\n<td>[[:space:]]</td>\n<td>任意空白字符</td>\n</tr>\n<tr>\n<td>[[:upper:]]</td>\n<td>任意大写字母</td>\n</tr>\n<tr>\n<td>[[:lower:]]</td>\n<td>任意小写字母</td>\n</tr>\n<tr>\n<td>[[:punct:]]</td>\n<td>任意标点符号</td>\n</tr>\n<tr>\n<td>[[:xdigit:]]</td>\n<td>任意 16 进制数字，相当于 [0-9a-fA-F]</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "学习",
                "Oracle",
                "regexp",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/Recursive_Query_Example/",
            "url": "http://swsw.eu.org/code/oracle/Recursive_Query_Example/",
            "title": "递归查询示例",
            "date_published": "2024-04-06T07:57:30.474Z",
            "content_html": "<h1 id=\"递归查询示例\"><a class=\"anchor\" href=\"#递归查询示例\">#</a> 递归查询示例</h1>\n<h2 id=\"准备数据\"><a class=\"anchor\" href=\"#准备数据\">#</a> 准备数据</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建表并插入数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_area<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       id number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       parrent_id number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       name varchar2<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'广东省'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'上海市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'贵州省'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">'深圳市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">'广州市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">113</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">'佛山市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token string\">'松江区'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">131</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token string\">'安顺市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">132</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token string\">'遵义市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1111</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'南山区'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1112</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token string\">'龙岗区'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1121</span><span class=\"token punctuation\">,</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span><span class=\"token string\">'白云区'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1311</span><span class=\"token punctuation\">,</span><span class=\"token number\">131</span><span class=\"token punctuation\">,</span><span class=\"token string\">'西秀区'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_area <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">13111</span><span class=\"token punctuation\">,</span><span class=\"token number\">1311</span><span class=\"token punctuation\">,</span><span class=\"token string\">'大西桥镇'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_area<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)!</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img1.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>表中数据的关系如下图：<img loading=\"lazy\" data-src=\"./assets/tree.png\" alt=\"Alt text\" /></p>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>找出每个地区下面的所有行政区，查询结果将行政区之间的层级关系也进行显示</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token punctuation\">,</span>parrent_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">,</span>name  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">,</span>connect_by_root name root_name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token punctuation\">,</span>connect_by_isleaf </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">,</span><span class=\"token keyword\">level</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token punctuation\">,</span>sys_connect_by_path<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'-->'</span><span class=\"token punctuation\">)</span> path </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> t_area t </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> parrent_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior id <span class=\"token operator\">=</span> parrent_id<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img2.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>???+ note annotate &quot;说明&quot;<br />\n-  <code>oracle</code>  中可以使用  <code>start with xxx connect by prior xxx</code>  语句实现递归<br />\n -  <code>prior</code>  后面一般跟一个等式，可以跟在等式的任意一边<br />\n -  <code>prior</code>  <strong>跟在谁的前面，就是向谁递归</strong></p>\n<p>找出 “贵州省” 下面的所有行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">,</span>parrent_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">,</span>name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> t_area</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior id <span class=\"token operator\">=</span> parrent_id<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img3.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>找出 “贵州省” 下面的所有市级及以上行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">,</span>parrent_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">,</span>name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> t_area</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">where</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior id <span class=\"token operator\">=</span> parrent_id<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img4.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>找出 “西秀区” 的所有上级行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">,</span>parrent_id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">,</span>name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> t_area</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'西秀区'</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> id <span class=\"token operator\">=</span> prior parrent_id<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img5.png\" alt=\"Alt text\" /></li>\n</ol>\n<h2 id=\"扩展-1\"><a class=\"anchor\" href=\"#扩展-1\">#</a> 扩展 1</h2>\n<p>现在不使用  <code>satrt with connect by</code>  来实现以下几个需求：</p>\n<p>找出 “贵州省” 下面的所有市级及以上行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> t_area </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> t_area a<span class=\"token punctuation\">,</span>t_area b </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img4-1711627596234-13.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>找出 “贵州省” 下面的所有区级及以上行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> t_area </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">from</span> t_area </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">from</span> t_area a<span class=\"token punctuation\">,</span>t_area b </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">)</span> a</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">join</span> t_area b</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">on</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img6.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>???+ tip annotate &quot;with 递归查询 (CTE)&quot;<br />\n- 通过 CTE，我们可以创建一组虚拟表，这些表之间可以互相引用，简化递归查询的过程<br />\n - 通过此种方式可以自定义实现更多的功能<br />\n - 此种方式更具备通用性，在很多数据库中都允许使用 CTE 来实现递归查询</p>\n<p>找出 “贵州省” 下面的所有行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tmp<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>parrent_id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">as</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>parrent_id<span class=\"token punctuation\">,</span>name </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">from</span> t_area </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'贵州省'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">from</span> tmp a<span class=\"token punctuation\">,</span>t_area b </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tmp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img3-1711627612981-16.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>找出 “西秀区” 的所有上级行政区</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tmp<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>parrent_id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">as</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>parrent_id<span class=\"token punctuation\">,</span>name </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">from</span> t_area </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'西秀区'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">from</span> tmp a<span class=\"token punctuation\">,</span>t_area b </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>parrent_id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img5-1711627617648-18.png\" alt=\"Alt text\" /></li>\n</ol>\n<p>使用  <code>with</code>  递归查询实现  <code>oracle</code>  层次查询中的  <code>level</code>  和  <code>sys_connect_by_path</code></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tmp<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>parrent_id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>lv<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">as</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>parrent_id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span><span class=\"token number\">1</span> lv<span class=\"token punctuation\">,</span>name path </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">from</span> t_area </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">where</span> parrent_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">select</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>lv <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>path <span class=\"token operator\">||</span> <span class=\"token string\">'-->'</span> <span class=\"token operator\">||</span> b<span class=\"token punctuation\">.</span>name path </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">from</span> tmp a<span class=\"token punctuation\">,</span>t_area b </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">where</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>parrent_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- (1)</span></pre></td></tr></table></figure><ol>\n<li><img loading=\"lazy\" data-src=\"./assets/img7.png\" alt=\"Alt text\" /></li>\n</ol>\n<h2 id=\"扩展-2\"><a class=\"anchor\" href=\"#扩展-2\">#</a> 扩展 2</h2>\n<p><strong>利用递归查询生成连续数字、日期等</strong></p>\n<p>利用递归查询生成 1~10 连续数字<br />\n === &quot;connect by 方式&quot;<br />\n <code>sql     select level      from dual      connect by level &lt;= 10;     </code></p>\n<p>=== &quot;with 方式&quot;<br />\n```sql<br />\nwith t(rn)<br />\nas<br />\n(select 1 rn from dual<br />\nunion all<br />\nselect rn + 1 from t<br />\nwhere rn &lt; 10)</p>\n<pre><code>select * from t;\n```\n</code></pre>\n<p>利用递归查询生成当前月的连续日期<br />\n === &quot;connect by 方式&quot;<br />\n <code>sql     select trunc(sysdate,'mm') + level - 1 dt      from dual      connect by level &lt;= last_day(trunc(sysdate,'mm')) - trunc(sysdate,'mm') + 1;     </code></p>\n<p>=== &quot;with 方式&quot;<br />\n```sql<br />\nwith t(rn)<br />\nas<br />\n(select 1 rn from dual<br />\nunion all<br />\nselect rn + 1 from t<br />\nwhere rn &lt; last_day(trunc(sysdate,'mm')) - trunc(sysdate,'mm') + 1)</p>\n<pre><code>select trunc(sysdate,'mm') + rn - 1 dt from t;\n```\n</code></pre>\n",
            "tags": [
                "学习",
                "Oracle",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/Hierarchical_Query_Pseudocolumns/",
            "url": "http://swsw.eu.org/code/oracle/Hierarchical_Query_Pseudocolumns/",
            "title": "层次查询伪列",
            "date_published": "2024-04-06T07:57:30.473Z",
            "content_html": "<h1 id=\"层次查询伪列\"><a class=\"anchor\" href=\"#层次查询伪列\">#</a> 层次查询伪列</h1>\n<p>层次查询伪列仅在层次查询中有效。层次查询伪列包括:</p>\n<ul>\n<li><a href=\"#%E5%B1%82%E6%AC%A1%E6%9F%A5%E8%AF%A2%E4%BC%AA%E5%88%97\">层次查询伪列</a>\n<ul>\n<li><a href=\"#connect_by_iscycle\">CONNECT_BY_ISCYCLE</a></li>\n<li><a href=\"#connect_by_isleaf\">CONNECT_BY_ISLEAF</a></li>\n<li><a href=\"#level\">LEVEL</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"admonition info\"><p class=\"admonition-title\">info</p><p>要在查询中定义层级关系, 必须使用 <code>CONNECT BY</code> 子句。</p>\n</div>\n<h2 id=\"connect_by_iscycle\"><a class=\"anchor\" href=\"#connect_by_iscycle\">#</a> CONNECT_BY_ISCYCLE</h2>\n<p>如果当前行有一个子节点也是其祖先节点，则  <code>CONNECT_BY_ISCYCLE</code>  伪列返回 1, 否则返回 0。</p>\n<p>只有在指定了  <code>CONNECT BY</code>  子句的  <code>NOCYCLE</code>  参数时，才能指定  <code>CONNECT_BY_ISCYCLE</code> 。 <code>NOCYCLE</code>  使 Oracle 能够返回，否则会因  <code>CONNECT BY</code>  循环而失败的查询结果。</p>\n<h2 id=\"connect_by_isleaf\"><a class=\"anchor\" href=\"#connect_by_isleaf\">#</a> CONNECT_BY_ISLEAF</h2>\n<p>如果当前行是  <code>CONNECT BY</code>  条件定义的树的叶节点，则  <code>CONNECT_BY_ISLEAF</code>  伪列返回 1, 否则返回 0。此信息指示是否可以进一步展开给定行以显示更多层次结构。</p>\n<p>示例：</p>\n<p>以下示例显示了  <code>hr.employees</code>  表的前三层，指示每个行是否是叶行 (在  <code>IsLeaf</code>  列中用 1 表示) 或者是否有子行 (在  <code>IsLeaf</code>  列中用 0 表示):</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> last_name                           <span class=\"token string\">\"Employee\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> connect_by_isleaf                   <span class=\"token string\">\"IsLeaf\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">,</span> sys_connect_by_path<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Path\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">where</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span> <span class=\"token operator\">and</span> department_id <span class=\"token operator\">=</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id <span class=\"token operator\">and</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token string\">\"Employee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IsLeaf\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Employee                      IsLeaf      <span class=\"token keyword\">LEVEL</span> Path  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">------------------------- ---------- ---------- -------------------------</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Abel                               <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Zlotkey<span class=\"token operator\">/</span>Abel</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Ande                               <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Errazuriz<span class=\"token operator\">/</span>Ande  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Banda                              <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Errazuriz<span class=\"token operator\">/</span>Banda</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Bates                              <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault<span class=\"token operator\">/</span>Bates</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Bernstein                          <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Russell<span class=\"token operator\">/</span>Bernstein</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Bloom                              <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault<span class=\"token operator\">/</span>Bloom</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Cambrault                          <span class=\"token number\">0</span>          <span class=\"token number\">2</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Cambrault                          <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Russell<span class=\"token operator\">/</span>Cambrault</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Doran                              <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Partners<span class=\"token operator\">/</span>Doran</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Errazuriz                          <span class=\"token number\">0</span>          <span class=\"token number\">2</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Errazuriz</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Fox                                <span class=\"token number\">1</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault<span class=\"token operator\">/</span>Fox</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"level\"><a class=\"anchor\" href=\"#level\">#</a> LEVEL</h2>\n<p>对于层次查询返回的每一行， <code>LEVEL</code>  伪列返回 1 表示根行，2 表示根的子节点，以此类推。<strong>根行</strong> 是倒置树中的最高行。<strong>子行</strong> 是任何非根行。<strong>父行</strong> 是任何具有子节点的行。<strong>叶行</strong> 是任何没有子节点的行。下图显示了具有其  <code>LEVEL</code>  值的倒置树的节点。</p>\n<p><img loading=\"lazy\" data-src=\"./assets/sqlrf001.gif\" alt=\"层次树\" /></p>\n",
            "tags": [
                "学习",
                "Oracle",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/Hierarchical_Query_Operators/",
            "url": "http://swsw.eu.org/code/oracle/Hierarchical_Query_Operators/",
            "title": "层次查询运算符",
            "date_published": "2024-04-06T07:57:30.472Z",
            "content_html": "<h2 id=\"层次查询运算符\"><a class=\"anchor\" href=\"#层次查询运算符\">#</a> 层次查询运算符</h2>\n<p>仅在层次查询中才有效的运算符有两个， <code>PRIOR</code>  和  <code>CONNECT_BY_ROOT</code> 。</p>\n<h2 id=\"prior\"><a class=\"anchor\" href=\"#prior\">#</a> PRIOR</h2>\n<p>在层次查询中， <code>CONNECT BY</code>  条件中的一个表达式必须由  <code>PRIOR</code>  运算符修饰。如果  <code>CONNECT BY</code>  条件是复合的，则只需要一个条件使用  <code>PRIOR</code>  运算符，尽管可以有多个  <code>PRIOR</code>  条件。 <code>PRIOR</code>  为层次查询中的当前行的父行立即计算后面的表达式。</p>\n<p>???+ info<br />\n <code>PRIOR</code>  最常用于与等号运算符比较列值。( <code>PRIOR</code>  关键字可以在运算符的任一边。) <code>PRIOR</code>  会导致 Oracle 使用父行中的列值。除等号 (=) 之外的其他运算符在  <code>CONNECT BY</code>  子句中理论上也是可能的。但是，这些其他运算符创建的条件可能会导致通过可能的组合进行无限循环。在这种情况下，Oracle 会在运行时检测到循环并返回错误。</p>\n<h2 id=\"connect_by_root\"><a class=\"anchor\" href=\"#connect_by_root\">#</a> CONNECT_BY_ROOT</h2>\n<p><code>CONNECT_BY_ROOT</code>  是仅在层次查询中才有效的一元运算符。当使用此运算符限定列时，Oracle 将使用根行的数据返回列值。</p>\n<p>???+ warning<br />\n 不能在  <code>START WITH</code>  条件或  <code>CONNECT BY</code>  条件中指定此运算符。</p>\n",
            "tags": [
                "学习",
                "Oracle",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/oracle/Hierarchical_Queries/",
            "url": "http://swsw.eu.org/code/oracle/Hierarchical_Queries/",
            "title": "层次查询",
            "date_published": "2024-04-06T07:57:30.471Z",
            "content_html": "<h1 id=\"层次查询\"><a class=\"anchor\" href=\"#层次查询\">#</a> 层次查询</h1>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p><img loading=\"lazy\" data-src=\"./assets/hierarchical_query_clause.gif\" alt=\"层次查询子句语法\" /></p>\n<p>!!! abstract annotate</p>\n<pre><code>- `condition` 可以是任何条件。\n- `START WITH` 指定层次结构的根行。\n- `CONNECT BY` 指定父行和子行之间的关系。\n- `NOCYCLE` 参数指示 Oracle 数据库即使数据中存在 `CONNECT BY` 循环也返回行。将此参数与 [`CONNECT_BY_ISCYCLE`](./Hierarchical_Query_Pseudocolumns.md#connect_by_iscycle-伪列) 伪列一起使用, 以查看包含循环的行。\n- 在层次查询中, `condition` 中的一个表达式必须使用 `PRIOR` 运算符限定, 以引用父行。例如:\n\n  ```sql\n  ... PRIOR expr = expr\n  或\n  ... expr = PRIOR expr\n  ```\n  \n- `PRIOR` 是一元运算符, 与一元 + 和 - 算术运算符具有相同的优先级。它对层次查询中当前行的父行求值紧跟其后的表达式。\n\n    &gt; `PRIOR` 最常用于将列值与相等运算符进行比较。\n\n    &gt; `PRIOR` 关键字可以在运算符的任一侧，**prior 在哪一侧，就是向哪一侧递归查询。**\n</code></pre>\n<h3 id=\"oracle-处理层次查询\"><a class=\"anchor\" href=\"#oracle-处理层次查询\">#</a> Oracle 处理层次查询</h3>\n<ul>\n<li>首先评估联接 (如果存在), 无论联接是在  <code>FROM</code>  子句中指定还是用  <code>WHERE</code>  子句谓词指定。</li>\n<li>评估  <code>CONNECT BY</code>  条件。</li>\n<li>评估任何其余的  <code>WHERE</code>  子句谓词。</li>\n</ul>\n<p>???+ quote &quot;形成层次结构的步骤&quot;</p>\n<pre><code> 1. Oracle 选择层次结构的根行, 即满足 `START WITH` 条件的行。\n 2. Oracle 选择每个根行的子行。每个子行必须满足与其中一个根行相关的 `CONNECT BY` 条件。\n 3. Oracle 选择后代子行的后续代。Oracle 首先选择步骤 [2] 中返回的行的子行, 然后是这些子行的子行, 依此类推。Oracle 始终通过评估与当前父行相关的 `CONNECT BY` 条件来选择子行。\n 4. 如果查询包含没有联接的 `WHERE` 子句, 则 Oracle 从层次结构中删除不满足 `WHERE` 子句条件的所有行。Oracle 对每行单独评估此条件, 而不是删除不满足条件的行的所有子行。\n 5. Oracle 以下图所示的顺序返回行。在图中, 子项出现在其父项下方。\n\n![层次查询](./assets/sqlrf002.gif)\n</code></pre>\n<p>要查找父行的子行，Oracle 会对父行的  <code>PRIOR</code>  表达式进行求值，并对表中的每一行求值  <code>CONNECT BY</code>  条件中的其他表达式。条件为真的行是父行的子行。 <code>CONNECT BY</code>  条件可以包含其他条件来进一步过滤查询选择的行。</p>\n<p>如果  <code>CONNECT BY</code>  条件导致层次结构中的循环，则 Oracle 返回错误。如果一行既是另一行的父行 (或祖父行或直接祖先) 也是其子行 (或孙行或直接后代), 则会发生循环。</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">annotate \n</p><p>在层次查询中, 指定 <code>ORDER BY</code> 或 <code>GROUP BY</code> 会覆盖 <code>CONNECT BY</code> 结果的层次顺序。如果要对具有相同父级的同级行进行排序, 请使用 <code>ORDER SIBLINGS BY</code> 子句。 (1)</p>\n</div>\n<ol>\n<li><em>order_by_clause</em>::=<br />\n<img loading=\"lazy\" data-src=\"./assets/order_by_clause.gif\" alt=\"order by\" /></li>\n</ol>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>CONNECT BY 示例</p>\n<p>使用  <code>CONNECT BY</code>  子句定义员工和管理者之间的关系:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> manager_id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employees </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>EMPLOYEE_ID LAST_NAME                 MANAGER_ID</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">----------- ------------------------- ----------</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token number\">101</span> Kochhar                          <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token number\">108</span> Greenberg                        <span class=\"token number\">101</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token number\">109</span> Faviet                           <span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token number\">110</span> Chen                             <span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token number\">111</span> Sciarra                          <span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token number\">112</span> Urman                            <span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token number\">113</span> Popp                             <span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token number\">200</span> Whalen                           <span class=\"token number\">101</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token number\">203</span> Mavris                           <span class=\"token number\">101</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token number\">204</span> Baer                             <span class=\"token number\">101</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"level-示例\"><a class=\"anchor\" href=\"#level-示例\">#</a> LEVEL 示例</h3>\n<p>使用  <code>LEVEL</code>  伪列显示父行和子行:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> manager_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employees </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>EMPLOYEE_ID LAST_NAME                 MANAGER_ID      <span class=\"token keyword\">LEVEL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">----------- ------------------------- ---------- ----------</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token number\">101</span> Kochhar                          <span class=\"token number\">100</span>          <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token number\">108</span> Greenberg                        <span class=\"token number\">101</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token number\">109</span> Faviet                           <span class=\"token number\">108</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token number\">110</span> Chen                             <span class=\"token number\">108</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token number\">111</span> Sciarra                          <span class=\"token number\">108</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token number\">112</span> Urman                            <span class=\"token number\">108</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token number\">113</span> Popp                             <span class=\"token number\">108</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token number\">200</span> Whalen                           <span class=\"token number\">101</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token number\">203</span> Mavris                           <span class=\"token number\">101</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token number\">204</span> Baer                             <span class=\"token number\">101</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token number\">205</span> Higgins                          <span class=\"token number\">101</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token number\">206</span> Gietz                            <span class=\"token number\">205</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token number\">102</span> De Haan                          <span class=\"token number\">100</span>          <span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"start-with-示例\"><a class=\"anchor\" href=\"#start-with-示例\">#</a> START WITH 示例</h3>\n<p>添加  <code>START WITH</code>  子句以指定层次结构的根行，并使用  <code>SIBLINGS</code>  关键字的  <code>ORDER BY</code>  子句在层次结构内保留排序:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> last_name<span class=\"token punctuation\">,</span> employee_id<span class=\"token punctuation\">,</span> manager_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">order</span> siblings <span class=\"token keyword\">by</span> last_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>LAST_NAME                 EMPLOYEE_ID MANAGER_ID      <span class=\"token keyword\">LEVEL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">------------------------- ----------- ---------- ----------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>King                              <span class=\"token number\">100</span>                     <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Cambrault                         <span class=\"token number\">148</span>        <span class=\"token number\">100</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Bates                             <span class=\"token number\">172</span>        <span class=\"token number\">148</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Bloom                             <span class=\"token number\">169</span>        <span class=\"token number\">148</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Fox                               <span class=\"token number\">170</span>        <span class=\"token number\">148</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Kumar                             <span class=\"token number\">173</span>        <span class=\"token number\">148</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Ozer                              <span class=\"token number\">168</span>        <span class=\"token number\">148</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Smith                             <span class=\"token number\">171</span>        <span class=\"token number\">148</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>De Haan                           <span class=\"token number\">102</span>        <span class=\"token number\">100</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Hunold                            <span class=\"token number\">103</span>        <span class=\"token number\">102</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Austin                            <span class=\"token number\">105</span>        <span class=\"token number\">103</span>          <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Ernst                             <span class=\"token number\">104</span>        <span class=\"token number\">103</span>          <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Lorentz                           <span class=\"token number\">107</span>        <span class=\"token number\">103</span>          <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Pataballa                         <span class=\"token number\">106</span>        <span class=\"token number\">103</span>          <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Errazuriz                         <span class=\"token number\">147</span>        <span class=\"token number\">100</span>          <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Ande                              <span class=\"token number\">166</span>        <span class=\"token number\">147</span>          <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Banda                             <span class=\"token number\">167</span>        <span class=\"token number\">147</span>          <span class=\"token number\">3</span></pre></td></tr></table></figure><p>在  <code>hr.employees</code>  表中，员工 Steven King 是公司的负责人，没有经理。他的员工中有 John Russell, Russell 是部门 80 的经理。如果将 Russell 设置为 King 的经理更新  <code>employees</code>  表，将在数据中创建一个循环:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">update</span> employees</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> manager_id <span class=\"token operator\">=</span> <span class=\"token number\">145</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> last_name                           <span class=\"token string\">\"Employee\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">,</span> sys_connect_by_path<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">where</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span> <span class=\"token operator\">and</span> department_id <span class=\"token operator\">=</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'King'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id <span class=\"token operator\">and</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ERROR:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ORA<span class=\"token operator\">-</span><span class=\"token number\">01436</span>: <span class=\"token keyword\">CONNECT</span> <span class=\"token keyword\">BY</span> <span class=\"token keyword\">loop</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">data</span></pre></td></tr></table></figure><p><code>CONNECT BY</code>  条件中的  <code>NOCYCLE</code>  参数会导致 Oracle 尽管循环仍返回行。 <code>CONNECT_BY_ISCYCLE</code>  伪列向您显示哪些行包含循环:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> last_name                           <span class=\"token string\">\"Employee\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> connect_by_iscycle                  <span class=\"token string\">\"Cycle\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">,</span> sys_connect_by_path<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Path\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">where</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span> <span class=\"token operator\">and</span> department_id <span class=\"token operator\">=</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'King'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> NOCYCLE prior employee_id <span class=\"token operator\">=</span> manager_id <span class=\"token operator\">and</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token string\">\"Employee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cycle\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Employee                       <span class=\"token keyword\">Cycle</span>      <span class=\"token keyword\">LEVEL</span> Path</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">------------------------- ---------- ---------- -------------------------</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Abel                               <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Zlotkey<span class=\"token operator\">/</span>Abel</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Ande                               <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Errazuriz<span class=\"token operator\">/</span>Ande</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Banda                              <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Errazuriz<span class=\"token operator\">/</span>Banda</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Bates                              <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault<span class=\"token operator\">/</span>Bates</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Bernstein                          <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Russell<span class=\"token operator\">/</span>Bernstein</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Bloom                              <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault<span class=\"token operator\">/</span>Bloom</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Cambrault                          <span class=\"token number\">0</span>          <span class=\"token number\">2</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Cambrault                          <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Russell<span class=\"token operator\">/</span>Cambrault</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Doran                              <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Partners<span class=\"token operator\">/</span>Doran</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Errazuriz                          <span class=\"token number\">0</span>          <span class=\"token number\">2</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Errazuriz</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Fox                                <span class=\"token number\">0</span>          <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Cambrault<span class=\"token operator\">/</span>Fox</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"connect_by_isleaf-示例\"><a class=\"anchor\" href=\"#connect_by_isleaf-示例\">#</a> CONNECT_BY_ISLEAF 示例</h3>\n<p>使用层次查询将列的值转换为逗号分隔列表:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> ltrim<span class=\"token punctuation\">(</span>sys_connect_by_path<span class=\"token punctuation\">(</span>warehouse_id<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> rownum r<span class=\"token punctuation\">,</span> warehouse_id <span class=\"token keyword\">from</span> warehouses<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> connect_by_isleaf <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> r <span class=\"token operator\">=</span> prior r <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> warehouse_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>LTRIM<span class=\"token punctuation\">(</span>SYS_CONNECT_BY_PATH<span class=\"token punctuation\">(</span>WAREHOUSE_ID<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">--------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span></pre></td></tr></table></figure><h3 id=\"connect_by_root-示例\"><a class=\"anchor\" href=\"#connect_by_root-示例\">#</a> CONNECT_BY_ROOT 示例</h3>\n<p>返回部门 110 中每个员工的姓、该员工在层次结构中高于其的最高级经理的姓、经理和员工之间的级别数，以及它们之间的路径:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> last_name                           <span class=\"token string\">\"Employee\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> connect_by_root last_name           <span class=\"token string\">\"Manager\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">,</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token string\">\"Pathlen\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">,</span> sys_connect_by_path<span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Path\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">where</span> <span class=\"token keyword\">level</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> department_id <span class=\"token operator\">=</span> <span class=\"token number\">110</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token string\">\"Employee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pathlen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Employee        Manager            Pathlen Path</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">--------------- --------------- ---------- ------------------------------</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Gietz           Higgins                  <span class=\"token number\">1</span> <span class=\"token operator\">/</span>Higgins<span class=\"token operator\">/</span>Gietz</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Gietz           King                     <span class=\"token number\">3</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Higgins<span class=\"token operator\">/</span>Gietz</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Gietz           Kochhar                  <span class=\"token number\">2</span> <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Higgins<span class=\"token operator\">/</span>Gietz</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Higgins         King                     <span class=\"token number\">2</span> <span class=\"token operator\">/</span>King<span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Higgins</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Higgins         Kochhar                  <span class=\"token number\">1</span> <span class=\"token operator\">/</span>Kochhar<span class=\"token operator\">/</span>Higgins</pre></td></tr></table></figure><p>使用  <code>GROUP BY</code>  子句返回部门 110 中每个员工及层次结构中高于该员工的所有员工的总薪水:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token string\">\"Total_Salary\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> connect_by_root last_name name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token punctuation\">,</span> Salary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">from</span> employees</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">where</span> department_id <span class=\"token operator\">=</span> <span class=\"token number\">110</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">connect</span> <span class=\"token keyword\">by</span> prior employee_id <span class=\"token operator\">=</span> manager_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Total_Salary\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>NAME                      Total_Salary</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">------------------------- ------------</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Gietz                             <span class=\"token number\">8300</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Higgins                          <span class=\"token number\">20300</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>King                             <span class=\"token number\">20300</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Kochhar                          <span class=\"token number\">20300</span></pre></td></tr></table></figure>",
            "tags": [
                "学习",
                "Oracle",
                "sql",
                "oracle"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/linux/sed/",
            "url": "http://swsw.eu.org/code/linux/sed/",
            "title": "sed 流编辑器",
            "date_published": "2024-04-06T07:57:30.464Z",
            "content_html": "<h1 id=\"sed-流编辑器\"><a class=\"anchor\" href=\"#sed-流编辑器\">#</a> sed 流编辑器</h1>\n<p>=== &quot;说明&quot;<br />\n!!! note&quot; 说明 &quot;<br />\n <code>sed</code>  是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为 “模式空间”(pattern space)，接着用  <code>sed</code>  命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。 <code>sed</code>  主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>\n<p>=== &quot;语法&quot;<br />\n!!! abstract&quot; 语法 &quot;<br />\n <code>shell          sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...         </code></p>\n<h2 id=\"sed-执行过程\"><a class=\"anchor\" href=\"#sed-执行过程\">#</a> sed 执行过程</h2>\n<p><img loading=\"lazy\" data-src=\"https://xlog.app/_next/image?url=https%3A%2F%2Fipfs.4everland.xyz%2Fipfs%2Fbafkreicsc4ek6ey5do2fme3g2m77mmeyex64rspnyyk42xbtxu356t5qgu&amp;w=1080&amp;q=75\" alt=\"image\" /></p>\n<h2 id=\"sed-命令选项\"><a class=\"anchor\" href=\"#sed-命令选项\">#</a> sed 命令选项</h2>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>取消默认 sed 输出，只输出处理后的结果，通常与 p 动作一起使用</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>支持使用扩展正则表达式</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>直接编辑文件，不使用 -i ，修改的只是缓冲区的内容</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>多次编辑，和管道符作用一样</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>运行 sed 脚本中的编辑命令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sed-编辑命令\"><a class=\"anchor\" href=\"#sed-编辑命令\">#</a> sed 编辑命令</h2>\n<table>\n<thead>\n<tr>\n<th>动作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a\\</td>\n<td>新增，在当前行下面插入文本 （用 \\ 或者空格都可以）</td>\n</tr>\n<tr>\n<td>i\\</td>\n<td>插入，在当前行上面插入文本</td>\n</tr>\n<tr>\n<td>c\\</td>\n<td>修改，把选定行修改为新的文本</td>\n</tr>\n<tr>\n<td>d</td>\n<td>删除，删除选定行</td>\n</tr>\n<tr>\n<td>p</td>\n<td>打印，打印匹配的内容，通常与 -n 选项一起使用</td>\n</tr>\n<tr>\n<td>s</td>\n<td>替换，匹配内容并进行替换，支持正则</td>\n</tr>\n<tr>\n<td>n</td>\n<td>读取下一个输入行，然后执行下一个命令</td>\n</tr>\n<tr>\n<td>w</td>\n<td>保存模式匹配的行至指定文件</td>\n</tr>\n<tr>\n<td>r</td>\n<td>读取指定文件的文本至模式空间中匹配到的行后</td>\n</tr>\n<tr>\n<td>=</td>\n<td>为模式空间中的行打印行号</td>\n</tr>\n<tr>\n<td>!</td>\n<td>模式空间中匹配行取反处理</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sed-替换标记\"><a class=\"anchor\" href=\"#sed-替换标记\">#</a> sed 替换标记</h2>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g</td>\n<td>行内全部替换，不写默认替换每行第一个，ng 表示替换第 n 次开始匹配到的内容</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>子字符串匹配标记；\\n 表示第几个分组里的内容</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>已匹配字符串标记</td>\n</tr>\n</tbody>\n</table>\n<p>???+ tip  &quot;s 替换命令说明&quot;<br />\n===&quot; 定界符 &quot;<br />\n- 替换命令中，常用 <code>/</code>  作为定界符，也可以使用自定义的定界符，如 <code>:</code> 、 <code>#</code> 、 <code>@</code> 等<br />\n - 定界符出现在内部时，需要进行转义，如  <code>sed 's:[0-9]:\\::' test.txt</code>  使用  <code>:</code>  作为定界符，将所有数字替换成 <code>:</code></p>\n<pre><code>=== &quot;组合多个表达式&quot;\n    - sed 替换命令可以结合其他命令一起使用，例如将第一行所有小写字母替换成 `#` 并进行打印\n        ```shell \n        sed '1s/[a-z]/#/gp' test.txt\n        ```\n    - 其他命令也可以组合多个表达式使用，可以有以下三种写法（在同一行里执行多个命令，受先后顺序影响）\n        ```shell \n        sed '表达式1' | sed '表达式2'\n        sed '表达式1; 表达式2'\n        sed -e '表达式1' -e '表达式2'`\n        ```\n\n=== &quot;子字符串匹配（反向引用）&quot;\n    - 匹配给定模式中的一部分，配合`()`分组使用，`\\n`就表示匹配第几个分组的结果\n\n=== &quot;已匹配字符串&quot;\n    - 使用 `&amp;` 来表示匹配到的每一个内容，也可以使用子字符串匹配来实现\n</code></pre>\n<h2 id=\"sed-匹配范围\"><a class=\"anchor\" href=\"#sed-匹配范围\">#</a> sed 匹配范围</h2>\n<table>\n<thead>\n<tr>\n<th>范围</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全文</td>\n<td>全文处理</td>\n</tr>\n<tr>\n<td>指定行</td>\n<td>指定文件的某一行 ；'1p' 表示打印第一行</td>\n</tr>\n<tr>\n<td>指定模式</td>\n<td>/pattern/ 被模式匹配到的每一行； '/^H/' 表示 H 开头的行</td>\n</tr>\n<tr>\n<td>指定范围区间</td>\n<td>范围内的每一行；'1,3' 表示第 1 行到第 3 行；'1,+2' 表示第 1 行和后两行；'$' 表示最后一行</td>\n</tr>\n<tr>\n<td>指定步长</td>\n<td>根据步长匹配行；'1~2' 表示 1,3,5,7,... 奇数行； '2~2' 表示 2,4,6,8... 偶数行</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>行范围和模式范围可以组合成范围区间使用</p>\n</blockquote>\n<h2 id=\"sed命令示例\"><a class=\"anchor\" href=\"#sed命令示例\">#</a> sed 命令示例</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打印第 5 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -n '5p' test.txt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 在每一行下面添加文本 \"day day up\"（不修改原文件）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed 'a day day up' test.txt</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 在第 1 行上面添加两行 \"abcde\" 和 \"ABCDE\" </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i '1i abcde\\nABCDE' test.txt</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 把最后一行更改为 \"66666\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i '$c 66666' test.txt </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 把所有的字符 'A' 修改为 'a'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i 's/A/a/g' test.txt </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 删除前 2 行</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i '1,2d' test.txt</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 将 'H' 开头的行写入文件 file.txt </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -n '/^H/w file.txt' test.txt</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 将 file.txt 文件里的内容写入第 5 行下面</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i '5r file.txt' test.txt</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 删除 'l' 开头的下一行</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i '/^l/&#123;n;d;&#125;' test.txt</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 打印 2-5 行之外的行</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -n '2,5!p' test.txt</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 将所有出现一次以上的字母 'b' 修改成数字 '8' 打印出来 </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -nr 's/b+/8/gp' test.txt</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 在第 6 行的内容删除 然后修改所有 '*' 为 '#'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -i -e '5d' -e 's/*/#/g' test.txt</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 新建文件 file.sed 里面书写 sed 脚本 将 test.txt 文件中第一行到 '?' 结尾的行打印出来</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo \"/1,/^A/p\" > file.sed </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -n -f file.sed test.txt </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">## 后向引用</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>-- 先保护后使用 </pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># 将 \"hello world\" 改成 \"[hello] [world]\" </span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo \"hello world\" | sed -r 's/(\\w+)/[\\1]/g'</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo \"hello world\" | sed -r 's/\\w+/[&amp;]/g'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\"># 将每一行第一次连续出现 3 次的字符串替换成 ‘嗯哼～’ </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -r -i's/([a-z])\\1\\1 / 嗯哼～/' test.txt</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># 获取 linux 的 ip 地址 </span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a s eth0 </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token number\">9</span>: eth0: <span class=\"token operator\">&lt;></span> mtu <span class=\"token number\">1500</span> group default qlen <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    link/ether d8:c4:97:92:73:08</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    inet <span class=\"token number\">169.254</span>.248.50/16 brd <span class=\"token number\">169.254</span>.255.255 scope global dynamic</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>       valid_lft forever preferred_lft forever</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    inet6 fe80::5219:3165:3e7d:41fb/64 scope <span class=\"token function\">link</span> dynamic</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>       valid_lft forever preferred_lft forever</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a s eth0 | sed -nr '3s/(^.*t )(.*)(\\/.*$)/\\2/gp'</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># 使用 sed 命令将任意 3 个小写字母倒置 例如：'abc' 改为 'cba'</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo \"abc“ | sed -n 's/([a-z])([0-z])(a-z)/\\3\\2\\1/p'</span></pre></td></tr></table></figure>",
            "tags": [
                "学习",
                "Linux",
                "linux"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/linux/Linunx_regular_expression/",
            "url": "http://swsw.eu.org/code/linux/Linunx_regular_expression/",
            "title": "linux正则表达式",
            "date_published": "2024-04-06T07:57:30.462Z",
            "content_html": "<h1 id=\"linux正则表达式\"><a class=\"anchor\" href=\"#linux正则表达式\">#</a> linux 正则表达式</h1>\n<p>!!! tip &quot;Linux 三剑客&quot;<br />\n-  <code>grep</code>  文本过滤工具（过滤，查找文本内容）<br />\n-  <code>sed</code>  stream editor 流编辑器 文本编辑工具（取行，修改文件内容）<br />\n-  <code>awk</code>  文本分析工具 格式化文本输出（取列，统计计算）</p>\n<p><code>regual expression regexp </code></p>\n<p>此处使用  <code>grep</code>  命令来学习正则表达式（grep 命令可过滤匹配模式的内容）</p>\n<blockquote>\n<p><code>grep</code>  命令基本语法： <code>grep pattern filename</code>     pattern 是匹配的模式</p>\n</blockquote>\n<h2 id=\"linux通配符和正则表达式\"><a class=\"anchor\" href=\"#linux通配符和正则表达式\">#</a> linux 通配符和正则表达式</h2>\n<ul>\n<li>通配符是对文件进行匹配的；由 shell 解析，如 <code>ls</code> 、 <code>cp</code> 、 <code>mv</code> 、 <code>find</code>  等命令</li>\n<li>正则表达式是对文件内容进行匹配的；正则表达式一般结合  <code>grep</code> 、 <code>sed</code> 、 <code>awk</code>  使用</li>\n</ul>\n<p><strong>常见通配符</strong></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>匹配任意长度的任意字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配任意单个字符</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>匹配指定范围内任意单个字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>匹配指定范围外任意单个字符</td>\n</tr>\n<tr>\n<td>[[:upper:]]</td>\n<td>所有大写字母，等价于 [A-Z]</td>\n</tr>\n<tr>\n<td>[[:lower:]]</td>\n<td>所有小写字母，等价于 [a-z]</td>\n</tr>\n<tr>\n<td>[[:alpha:]]</td>\n<td>所有字母，等价于 [a-zA-Z]</td>\n</tr>\n<tr>\n<td>[[:digit:]]</td>\n<td>所有数字，等价于 [0-9]</td>\n</tr>\n<tr>\n<td>[[:alnum:]]</td>\n<td>所有数字和字母，等价于 [0-9a-zA-Z]</td>\n</tr>\n<tr>\n<td>[[:space:]]</td>\n<td>所有空白字符</td>\n</tr>\n<tr>\n<td>[[:punct:]]</td>\n<td>所有标点符号</td>\n</tr>\n</tbody>\n</table>\n<p>???+ quote<br />\n [0-9] 表示任意一个数字 <br><br />\n[a-z] 表示任意一个小写字母 <br><br />\n[A-Z] 表示任意一个大写字母 <br><br />\n[0-9a-zA-Z] 表示任意一个数字或字母</p>\n<p><em>文件 test.txt 内容如下:</em></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat test.txt </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>You and me.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xxx is a hanhan. ^_^</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>longzhaoqianwowudunjiu.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>He can speak english.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Are you kidding?</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>I think <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>youoy abba ccccc ddd</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>My phone number is <span class=\"token number\">1872272</span>****.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> vvv</pre></td></tr></table></figure><h3 id=\"通配符示例\"><a class=\"anchor\" href=\"#通配符示例\">#</a> 通配符示例</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找当前目录下以数字命名的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find . -name [0-9]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find . -name [[:digit:]]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查找 test.txt 中包含数字的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '[[:digit:]]' test.txt</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 查找 test.txt 中标点符号以外的内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '[^[:punct:]]' test.txt</span></pre></td></tr></table></figure><h2 id=\"基础元字符\"><a class=\"anchor\" href=\"#基础元字符\">#</a> 基础元字符</h2>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>^a 以 a 开头的内容</td>\n</tr>\n<tr>\n<td>$</td>\n<td>a$ 以 a 结尾的内容</td>\n</tr>\n<tr>\n<td>^$</td>\n<td>空行（在 linux 的文本中，每一行的末尾会有默认的 $ 符号 使用 <code>cat -E file</code>  可以看到）</td>\n</tr>\n<tr>\n<td>.</td>\n<td>任意一个字符 （非空行）</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义字符，让有特殊含义的字符脱掉马甲</td>\n</tr>\n<tr>\n<td>*</td>\n<td>之前的字符连续 0 次或多次</td>\n</tr>\n<tr>\n<td>.*</td>\n<td>任意多个字符（匹配全部内容）</td>\n</tr>\n<tr>\n<td>^.*</td>\n<td>以任意多个字符串开头，具有贪婪性</td>\n</tr>\n<tr>\n<td>[ab]</td>\n<td>包含中括号中的任意一个字符（a 或 b）</td>\n</tr>\n<tr>\n<td>[^ab]</td>\n<td>不包含 ^ 后的任意字符（a 或 b），对 [ab] 的取反</td>\n</tr>\n<tr>\n<td>\\&lt;</td>\n<td>词首</td>\n</tr>\n<tr>\n<td>\\&gt;</td>\n<td>词尾</td>\n</tr>\n<tr>\n<td>\\{n\\}</td>\n<td>重复前面字符 n 次</td>\n</tr>\n<tr>\n<td>\\{n,\\}</td>\n<td>重复前面字符最少 n 次</td>\n</tr>\n<tr>\n<td>\\{,m\\}</td>\n<td>重复前面字符最多 m 次</td>\n</tr>\n<tr>\n<td>\\{n,m\\}</td>\n<td>重复前面字符 n 次到 m 次（最少 n 次，最多 m 次）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找所有以 'Y' 开头的行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '^Y' test.txt </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查找以 'g' 结尾的行 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep 'g$' test.txt </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查找所有空行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '^$' test.txt</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 查找非空行 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '.' test.txt </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 查找以 '.' 结尾的行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '\\.$' test.txt </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 查找连续出现 0 个或多个 d 的内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep 'd*' test.txt </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 查找全部内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '.*' test.txt </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 以任意字符串开头并且包含 d 的内容 （贪婪匹配，会匹配到每行文本的最后一个 d）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '^.*d' test.txt </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 匹配 l 或 x</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '[lx]' test.txt </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 不匹配 l 和 x</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '[^lx]' test.txt </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 匹配 l 或 x 开头</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '^[lx]' test.txt </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 匹配单词 speak</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '\\&lt;speak\\>' test.txt</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 匹配空格开头的内容</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '^[[:space:]]' test.txt</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep '^[ ]' test.txt</span></pre></td></tr></table></figure><h2 id=\"扩展元字符\"><a class=\"anchor\" href=\"#扩展元字符\">#</a> 扩展元字符</h2>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>重复前一个字符 1 次或多次（至少 1 次），取出连续的字符或文本</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复前一个字符 0 次或 1 次（最多 1 次）</td>\n</tr>\n<tr>\n<td>|</td>\n<td>表示或者同时过滤多个字符</td>\n</tr>\n<tr>\n<td>()</td>\n<td>分组，将（）里的内容当成一个整体，\\n（n 是一个数字） 表示引用第几个括号里的内容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例</h3>\n<p>???+ quote<br />\n- 在基本表达式中，扩展正则表达式需要在前面使用 \\ 进行转义<br />\n - 使用  <code>egrep</code>  或  <code>grep -E</code>  来使用扩展正则表达式不需要使用 \\ 转义</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 包含连续一个或多个 d  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep 'd\\+' test.txt </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># egrep 'd+' test.txt </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E 'd+' test.txt </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 包含 0 次或 1 次 d </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E 'd?' test.txt </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 匹配 a 或 b</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E 'a|b' test.txt</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 匹配 'and' 或 'abb'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E 'a(nd|bb)' test.txt</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 匹配两个相同的字母</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E '([a-z])\\1' test.txt</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 重复 d 字符最少 1 次，最多 2 次</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E 'd&#123;1,2&#125;' test.txt</span></pre></td></tr></table></figure><h2 id=\"扩展perl支持的其他常用元字符\"><a class=\"anchor\" href=\"#扩展perl支持的其他常用元字符\">#</a> 扩展：perl 支持的其他常用元字符</h2>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>非数字</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>数字，字母，下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>非   数字、字母、下划线</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>非空字符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用 grep -P 可以支持 perl 正则表达式</p>\n</blockquote>\n<h3 id=\"示例-3\"><a class=\"anchor\" href=\"#示例-3\">#</a> 示例</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 匹配所有的单词</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span> <span class=\"token comment\"># grep -P '\\w+' test.txt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 匹配所有的非数字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span> <span class=\"token comment\"># grep -P '\\D' test.txt</span></pre></td></tr></table></figure>",
            "tags": [
                "学习",
                "Linux",
                "linux",
                "regexp"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/linux/grep/",
            "url": "http://swsw.eu.org/code/linux/grep/",
            "title": "grep 文本过滤工具",
            "date_published": "2024-04-06T07:57:30.461Z",
            "content_html": "<h1 id=\"grep-文本过滤工具\"><a class=\"anchor\" href=\"#grep-文本过滤工具\">#</a> grep 文本过滤工具</h1>\n<p>=== &quot;说明&quot;<br />\n!!! note&quot; 说明 &quot;<br />\n <code>grep</code>  (global search regular expression (RE) and print out the line, 全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。用于过滤搜索的特定字符。可使用正则表达式，能多种命令配合使用，使用上十分灵活。</p>\n<p>=== &quot;语法&quot;<br />\n!!! abstract&quot; 语法 &quot;<br />\n <code>shell         grep [OPTION...] PATTERNS [FILE...] &lt;br&gt;         grep [OPTION...] -e PATTERNS ... [FILE...] &lt;br&gt;         grep [OPTION...] -f PATTERN_FILE ... [FILE...]          </code></p>\n<h2 id=\"grep-命令选项\"><a class=\"anchor\" href=\"#grep-命令选项\">#</a> grep 命令选项</h2>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>-c</strong></td>\n<td>统计文件中匹配的行数</td>\n</tr>\n<tr>\n<td><strong>-i</strong></td>\n<td>忽略模式中的字母大小写</td>\n</tr>\n<tr>\n<td><strong>-n</strong></td>\n<td>列出所有的匹配行，并显示行号</td>\n</tr>\n<tr>\n<td><strong>-v</strong></td>\n<td>列出没有匹配模式的行，取反</td>\n</tr>\n<tr>\n<td><strong>-e</strong></td>\n<td>多个选项间的逻辑或</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>只显示被模式匹配到内容</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>列出带有匹配内容的文件名</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>匹配整个单词</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>静默模式，不输出任何信息</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归搜索</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>根据文件内容匹配多个（文件中逐行写出要匹配的内容）</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>after, 后 n 行（被匹配到的行及后 n 行）</td>\n</tr>\n<tr>\n<td>-B</td>\n<td>before, 前 n 行（被匹配到的行及前 n 行）</td>\n</tr>\n<tr>\n<td>-C</td>\n<td>context，前后各 n 行（被匹配到的行及前后各 n 行）</td>\n</tr>\n<tr>\n<td><strong>-E</strong></td>\n<td>使用扩展的正则表达式，相当于 egrep</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>相当于 fgrep，不支持正则表达式</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>使用 perl 正则表达式</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用帮助命令可查看全部选项（grep --help  或  man grep）</p>\n</blockquote>\n<p>???+ tip<br />\n-  <code>grep</code>  使用 “标准正则表达式” 作为匹配标准<br />\n -  <code>egrep</code>  扩展的 grep 命令，相当于  <code>grep -E</code>  ，使用扩展正则表达式作为匹配标准<br />\n -  <code>fgrep</code>  简化版的 grep 命令，不支持正则表达式，但搜索速度快，系统资源使用率低</p>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 统计空行的行数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -c '^$' test.txt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 包含字符 h 的行（不区分大小写）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -i 'h' test.txt</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 列出所有空行 并显示行号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -n '^$' test.txt</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 列出所有非空行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -v '^$' test.txt</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 列出所有以 S 开头的行和空行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -e '^$' -e '^S' test.txt </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 过滤所有的数字 只显示被匹配到的内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -o '[0-9]' test.txt </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 列出内容包含 a 的文件名</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -l 'a' demo.txt test.txt pwd.txt</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 匹配包含单词 you 的行</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -w 'you' test.txt </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 根据 file 里面的范文进行匹配</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -f file test.txt </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 列出包含 can 的行以及其后三行 </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -A3 'can' test.txt  </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 列出包含 can 的行以及其前三行 </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -B3 'can' test.txt  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 列出包含 can 的行以及其前后各三行 </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -C3 'can' test.txt  </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 重复 d 字符最少 2 次</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -E 'd&#123;2,&#125;' test.txt</span></pre></td></tr></table></figure>",
            "tags": [
                "学习",
                "Linux",
                "linux"
            ]
        },
        {
            "id": "http://swsw.eu.org/code/linux/awk_programming/",
            "url": "http://swsw.eu.org/code/linux/awk_programming/",
            "title": "awk 编程",
            "date_published": "2024-04-06T07:57:30.460Z",
            "content_html": "<h1 id=\"awk-编程\"><a class=\"anchor\" href=\"#awk-编程\">#</a> awk 编程</h1>\n<h2 id=\"awk-运算符\"><a class=\"anchor\" href=\"#awk-运算符\">#</a> awk 运算符</h2>\n<h3 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+  -  *  /  %</td>\n<td>加  减  乘  除  取余</td>\n</tr>\n<tr>\n<td>^  **</td>\n<td>求幂</td>\n</tr>\n<tr>\n<td>++  --</td>\n<td>自增  自减  （可作为前缀或后缀）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=  +=  -=  *=  /=  %=  ^=  **=</td>\n<td>赋值语句（a+=b 等价于 a=a+b，其他类似）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;  &lt;  &gt;=  &lt;=  !=  ==</td>\n<td>比较语句（成立返回真，不成立返回假）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>||</td>\n<td>逻辑或（有真则真）</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与（有假则假）</td>\n</tr>\n<tr>\n<td>!</td>\n<td>逻辑非（真变假，假变真）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"正则运算符\"><a class=\"anchor\" href=\"#正则运算符\">#</a> 正则运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~</td>\n<td>匹配正则表达式</td>\n</tr>\n<tr>\n<td>!~</td>\n<td>不匹配正则表达式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"其他运算符\"><a class=\"anchor\" href=\"#其他运算符\">#</a> 其他运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$</td>\n<td>字段引用</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>字符串连接符</td>\n</tr>\n<tr>\n<td>in</td>\n<td>数组成员迭代符（一般和 for 循环一起，用于遍历数组）</td>\n</tr>\n<tr>\n<td>? :</td>\n<td>三目运算符（和 C 语言一样：   <code>表达式 ? 语句1 : 语句2</code>    表达式成立，执行语句 1，否则执行语句 2)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"awk-流程控制语句\"><a class=\"anchor\" href=\"#awk-流程控制语句\">#</a> awk 流程控制语句</h2>\n<h3 id=\"条件判断语句\"><a class=\"anchor\" href=\"#条件判断语句\">#</a> 条件判断语句</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># if</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>if<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t语句</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># if-else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>if<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t语句1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t语句2 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># if-else-if</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>if<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t语句1 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>表达式2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t语句2 </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t语句3</pre></td></tr></table></figure><blockquote>\n<p>awk 分支结构允许嵌套，为了方便判断和阅读，可以将多个语句用 {} 括起来</p>\n</blockquote>\n<h3 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h3>\n<ul>\n<li>三大循环语句</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># while 循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t语句</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># for 循环</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 格式 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>for<span class=\"token punctuation\">(</span>初始变量<span class=\"token punctuation\">;</span>循环判断语句<span class=\"token punctuation\">;</span>循环遍历递增/递减语句<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t语句</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 格式 2 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>for<span class=\"token punctuation\">(</span>变量 <span class=\"token keyword\">in</span> 数组<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t语句</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># do-while 循环</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>do<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t语句</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> while<span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>???+ tip &quot;循环流程改变语句&quot;<br />\n-  <code>break；</code>   退出循环<br />\n -  <code>continue; </code>   跳过本次循环<br />\n -  <code>exit status_code;</code>     <code>exit</code>  语句用于停止脚本的执行（若有  <code>END</code>  则是转移到  <code>END</code>  ），接受一个整数参数作为  <code>awk</code>  进程的退出状态码，如未提供参数，则默认为 0（  <code>$?</code>  可以查看）</p>\n<h2 id=\"awk-数组\"><a class=\"anchor\" href=\"#awk-数组\">#</a> awk 数组</h2>\n<blockquote>\n<p>数组是 awk 的灵魂，处理文本中常常会用到数组处理</p>\n</blockquote>\n<p><code>awk</code>  数组特性：</p>\n<ul>\n<li><code>awk</code>  数组的下标可以是数字，也可以是字符串，因此， <code>awk</code>  中数组是关联数组</li>\n<li>在内部，  <code>awk</code>  数组的索引全都是字符串，即使是数值索引在使用时内部也会转换成字符串</li>\n<li><code>awk</code>  的数组元素的顺序和元素插入时的顺序不一定相同</li>\n<li><code>awk</code>  中的数组不必提前声明，也不用声明大小</li>\n<li>数组元素会根据上下文使用 0 或空字符串来初始化</li>\n</ul>\n<h3 id=\"创建添加-修改数组\"><a class=\"anchor\" href=\"#创建添加-修改数组\">#</a> 创建（添加、修改）数组</h3>\n<p>语法： <code>数组名[下标] = 值</code></p>\n<ul>\n<li>给数组添加 / 修改元素的语法和创建数组一样</li>\n</ul>\n<h3 id=\"访问数组元素\"><a class=\"anchor\" href=\"#访问数组元素\">#</a> 访问数组元素</h3>\n<p>语法： <code>数组名[下标]</code></p>\n<h3 id=\"删除数组元素\"><a class=\"anchor\" href=\"#删除数组元素\">#</a> 删除数组元素</h3>\n<p>语法： <code>delete 数组名[下标]</code></p>\n<ul>\n<li>删除不存在的元素不会报错</li>\n<li><code>delete 数组名</code> 可以直接删除数组所有元素</li>\n</ul>\n<h3 id=\"数组相关函数\"><a class=\"anchor\" href=\"#数组相关函数\">#</a> 数组相关函数</h3>\n<ul>\n<li>\n<p><code>length(arr)</code>   获取数组长度</p>\n</li>\n<li>\n<p><code>asort(arr) </code>   对数组进行排序，并返回数组长度</p>\n</li>\n<li>\n<p><code>split(str,arr,sep)</code>   分割字符串为数组，并返回数组长度</p>\n<blockquote>\n<p>生成的 awk 数组下标从 1 开始，和 C 语言数组不一样</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;str=\"a,b,c,d\";len=split(str,arr,\",\");print len,length(arr),asort(arr),arr[1]&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">4</span> <span class=\"token number\">4</span> a</pre></td></tr></table></figure><h3 id=\"遍历数组\"><a class=\"anchor\" href=\"#遍历数组\">#</a> 遍历数组</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 方式 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"a,b,c,d\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">len</span><span class=\"token operator\">=</span>split<span class=\"token punctuation\">(</span>str,arr,<span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>for<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>print i,arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>1 a</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2 b</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>3 c</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>4 d</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre># 方式2 （awk数组是关联数组，该方式可以保证有序遍历）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"a,b,c,d\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">len</span><span class=\"token operator\">=</span>split<span class=\"token punctuation\">(</span>str,arr,<span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>for<span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>print i,arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>1 a</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>2 b</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>3 c</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>4 d</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre># 判断数组中是否包含某个key</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>if(key in arr)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre># 检测arr是否是数组</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>isarray(arr)  如果arr是数组，返回1，否则返回0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>typeof(arr)   返回数据类型，如果arr是数组，返回 '</span>array'</pre></td></tr></table></figure><h3 id=\"多维数组\"><a class=\"anchor\" href=\"#多维数组\">#</a> 多维数组</h3>\n<ul>\n<li>awk 只支持一维数组，我们可以使用一维数组来模拟多维数组</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 有如下 3*3 的二维数组 arr：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在C语言中，arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>；在awk中，我们可以令arr<span class=\"token punctuation\">[</span><span class=\"token number\">0,0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>，以此类推：arr<span class=\"token punctuation\">[</span><span class=\"token number\">0,1</span><span class=\"token punctuation\">]</span>、arr<span class=\"token punctuation\">[</span><span class=\"token number\">0,2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.arr<span class=\"token punctuation\">[</span><span class=\"token number\">3,3</span><span class=\"token punctuation\">]</span>；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>实际上，0,1   <span class=\"token number\">0,2</span>   <span class=\"token number\">3,3</span>   只是一个字符串索引</pre></td></tr></table></figure><h2 id=\"awk-内置函数\"><a class=\"anchor\" href=\"#awk-内置函数\">#</a> awk 内置函数</h2>\n<h3 id=\"数学函数\"><a class=\"anchor\" href=\"#数学函数\">#</a> 数学函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sin(expr)</td>\n<td>返回 expr 的正弦值</td>\n</tr>\n<tr>\n<td>cos(expr)</td>\n<td>返回 expr 的余弦值</td>\n</tr>\n<tr>\n<td>atan2(y,x)</td>\n<td>返回 y/x 的反切值</td>\n</tr>\n<tr>\n<td>log(expr)</td>\n<td>返回 expr 的自然对数</td>\n</tr>\n<tr>\n<td>exp(expr)</td>\n<td>返回以 e 为底，expr 的指数值</td>\n</tr>\n<tr>\n<td>sqrt(expr)</td>\n<td>返回 expr 的平方根</td>\n</tr>\n<tr>\n<td>int(expr)</td>\n<td>返回 expr 截断至整数的值</td>\n</tr>\n<tr>\n<td>rand()</td>\n<td>返回任意数字 n，其中 0&lt;=n&lt;1</td>\n</tr>\n<tr>\n<td>srand([expr])</td>\n<td>把 rand 函数的种子值设置为 expr 参数的值，如果省略参数，则使用某天的时间</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取 0-99 之间的随机整数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;srand();randint=int(100*rand());print randint&#125;'</span></pre></td></tr></table></figure><h3 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asort(arr [, d ])</td>\n<td>按 ASCII 字符顺序对数组  <code>arr</code>  的值进行排序</td>\n</tr>\n<tr>\n<td>asorti(arr [, d])</td>\n<td>按 ASCII 字符顺序对数组  <code>arr</code>  的键进行排序</td>\n</tr>\n<tr>\n<td>gsub(regexp, sub, str)</td>\n<td>在一个字符串中查找指定的模式匹配的全部字符串，找到之后都替换为另一个字符串</td>\n</tr>\n<tr>\n<td>sub(search, sub, str)</td>\n<td>在一个字符串中查找指定的字符串，找到之后则替换为另一个字符串。只会替换一次</td>\n</tr>\n<tr>\n<td>index(str, sub)</td>\n<td>查找一个字符串在另一个字符串中的位置。如果找到则返回找到的位置，否则返回 0</td>\n</tr>\n<tr>\n<td>length(str)</td>\n<td>返回一个字符串的长度</td>\n</tr>\n<tr>\n<td>match(str, regexp)</td>\n<td>查找匹配模式的第一个最长子串位置。如果没找到则返回 0，找到则返回最长子串的开始位置</td>\n</tr>\n<tr>\n<td>split(str, arr, regexp)</td>\n<td>把一个字符串根据给定的模式分割成多个子串。如果没有传递模式则会使用变量  <code>FS</code>  的值</td>\n</tr>\n<tr>\n<td>printf(format, expr-list)</td>\n<td>根据给定的字符串格式和传递的变量构造字符串并输出到标准输出</td>\n</tr>\n<tr>\n<td>strtonum(str)</td>\n<td>用于检查一个字符串是否数字并将它转换为十进制数字</td>\n</tr>\n<tr>\n<td>substr(str, start, len)</td>\n<td>用于返回字符串  <code>str</code>  中的从  <code>start</code>  的位置开始，长度为  <code>len</code>  的子串</td>\n</tr>\n<tr>\n<td>tolower(str)</td>\n<td>用于将指定的字符串中的大写字母转换为小写字母</td>\n</tr>\n<tr>\n<td>toupper(str)</td>\n<td>用于将指定的字符串中的小写字母转换为大写字母</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># asort (arr [,d])  arr--> 数组 d--> 数组，如果传了该参数，就不会修改 arr，而是把 arr 中所有元素拷贝到 d，然后对 d 进行排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">800</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        print i,arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    asort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    print<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    for<span class=\"token punctuation\">(</span>j <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        print j,arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>11 800</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>22 200</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>33 300</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>44 100</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>1 100</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>2 200</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>3 300</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>4 800</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre># asorti</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">800</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    for<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        print i,arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    asorti<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    print<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    for<span class=\"token punctuation\">(</span>j <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        print j,arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>11 800</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>22 200</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>33 300</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>44 100</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>1 11</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>2 22</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>3 33</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>4 44</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre># gsub(regexp, sub, str)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    gsub<span class=\"token punctuation\">(</span><span class=\"token string\">\"[o|l]\"</span>,<span class=\"token string\">\"*\"</span>,str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    print str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>he*** w*r*d</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre># sub(search, sub, str)</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"[o|l]\"</span>,<span class=\"token string\">\"*\"</span>,str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    print str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>he*lo world</pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre># index(str, sub)</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token assign-left variable\">idx</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">(</span>str,<span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    print idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre># match(str, regexp)</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world hi haaaaaa\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token assign-left variable\">idx</span><span class=\"token operator\">=</span>match<span class=\"token punctuation\">(</span>str,<span class=\"token string\">\"h*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    print idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre># strtonum(str)</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"01010\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token assign-left variable\">res</span><span class=\"token operator\">=</span>strtonum<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    print res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>520</pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre># substr(str, start, len)</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token assign-left variable\">res</span><span class=\"token operator\">=</span>substr<span class=\"token punctuation\">(</span>str,7,5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    print res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>world</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre># tolower(str)</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>[root@localhost ~]#  awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"HAHAHA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token assign-left variable\">res</span><span class=\"token operator\">=</span>tolower<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    print res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>hahaha</pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre># tolupper(str)</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token assign-left variable\">res</span><span class=\"token operator\">=</span>toupper<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    print res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span>'</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>HELLO WORLD</pre></td></tr></table></figure><h3 id=\"日期和时间函数\"><a class=\"anchor\" href=\"#日期和时间函数\">#</a> 日期和时间函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>systime()</td>\n<td>返回当前时间戳</td>\n</tr>\n<tr>\n<td>mktime(datespec)</td>\n<td>将指定格式的时间字符串 ( <code>YYYY MM DD HH MM SS</code> ) 转换为时间戳</td>\n</tr>\n<tr>\n<td>strftime([format [, timestamp]])</td>\n<td>将一个时间戳格式的时间根据指定的时间格式化符转成字符串形式表示</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"示例-3\"><a class=\"anchor\" href=\"#示例-3\">#</a> 示例</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># systime()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;print systime()&#125;'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1672448348</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># mktime(datespec)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;print mktime(\"2022 12 31 09 00 00\")&#125;'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1672448400</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># strftime([format [, timestamp]])</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;print strftime(\"%c\",systime())&#125;'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Sat Dec <span class=\"token number\">31</span> 09:03:53 <span class=\"token number\">2022</span></pre></td></tr></table></figure><h4 id=\"格式化\"><a class=\"anchor\" href=\"#格式化\">#</a> 格式化</h4>\n<table>\n<thead>\n<tr>\n<th>格式符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>本地化的星期几，例如  <code>星期四</code></td>\n</tr>\n<tr>\n<td>%A</td>\n<td>本地化的星期几缩写，例如  <code>四</code></td>\n</tr>\n<tr>\n<td>%b</td>\n<td>本地化的月份所写，例如  <code>5月</code></td>\n</tr>\n<tr>\n<td>%B</td>\n<td>本地化的月份，例如  <code>五月</code></td>\n</tr>\n<tr>\n<td>%c</td>\n<td>C 语言中的  <code>%A %B %d %T %Y</code>  的格式，例如  <code>2019年05月30日 星期四 21时08分37秒</code></td>\n</tr>\n<tr>\n<td>%C</td>\n<td>本年度的世纪部分。也就是四位数字年份的前两位，例如  <code>2019</code>  年中的  <code>20</code></td>\n</tr>\n<tr>\n<td>%d</td>\n<td>当月中的第几天，范围为  <code>01-31</code> ，例如  <code>30</code></td>\n</tr>\n<tr>\n<td>%D</td>\n<td>格式  <code>%m/%d/%y</code>  的简写，例如  <code>05/30/19</code></td>\n</tr>\n<tr>\n<td>%e</td>\n<td>当月中的第几天，范围为  <code>1-31</code> ，如果小于  <code>10</code>  则在前面补空格，如  <code>1</code>  补全为  <code>1</code></td>\n</tr>\n<tr>\n<td>%F</td>\n<td><code>ISO 8601</code>  日期格式中的  <code>%Y-%m-%d</code>  的别名</td>\n</tr>\n<tr>\n<td>%g</td>\n<td><code>ISO 8601</code>  日期格式中的周数除以 100 的值，范围  <code>00-99</code>  例如 1993 年 1 月 1 日是 1992 年的第 53 周</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>IOS 周数制下的完整年费，类似于四位数年份，例如  <code>2019</code></td>\n</tr>\n<tr>\n<td>%h</td>\n<td>格式  <code>%b</code>  的别名</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>24 小时制的当前时间的时，范围为  <code>00–23</code></td>\n</tr>\n<tr>\n<td>%I</td>\n<td>12 小时制的当前时间的时，范围为  <code>01–12</code></td>\n</tr>\n<tr>\n<td>%j</td>\n<td>一年中的第几天，范围为  <code>001–366</code></td>\n</tr>\n<tr>\n<td>%m</td>\n<td>当前时间的月，范围为  <code>01–12</code></td>\n</tr>\n<tr>\n<td>%M</td>\n<td>当前时间的分，范围为  <code>00–59</code></td>\n</tr>\n<tr>\n<td>%n</td>\n<td>换行符  <code>\\n</code></td>\n</tr>\n<tr>\n<td>%p</td>\n<td>本地化的 12 小时制时间格式中的  <code>AM</code>  或  <code>PM</code> ，也就是本地化的上午或下午表示形式</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>本地化的 12 小时制时间格式，类似于 C 语言中的  <code>%I:%M:%S %p</code></td>\n</tr>\n<tr>\n<td>%R</td>\n<td>格式  <code>%H:%M</code>  的缩写</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>当前时间的秒，范围为  <code>00-60</code>  。 <code>60</code>  主要考虑闰秒</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>制表符  <code>\\t</code></td>\n</tr>\n<tr>\n<td>%T</td>\n<td>格式  <code>%H:%M:%S</code>  的缩写</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>一周中的第几天，也就是星期几，范围为  <code>1–7</code> 。每周以星期一开始</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>一年中的第几周，范围为  <code>00-53</code> 。第一周从第一个星期日开始</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>一年中的第几周，范围为  <code>01-53</code> 。第一周从第一个星期一开始</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>一周中的第几天，也就是星期几，范围为  <code>0–6</code> 。每周以星期日开始</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>一年中的第几周，范围为  <code>00-53</code> 。第一周从第一个星期一开始</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>本地化的完整日期表示，类似于  <code>%A %B %d %Y</code> ，例如  <code>星期四 五月 30 2019</code></td>\n</tr>\n<tr>\n<td>%X</td>\n<td>本地化的完整时间表示，类似于 C 语言中的  <code>%T</code>  ，例如  <code>07:06:05</code></td>\n</tr>\n<tr>\n<td>%y</td>\n<td>两位十进制年份，即取年份的后两位，范围为  <code>00-99</code> ，比如  <code>2019</code>  则返回  <code>19</code></td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>完整的 4 位十进制年份，例如  <code>2019</code></td>\n</tr>\n<tr>\n<td>%z</td>\n<td>以  <code>+HHMM</code>  格式的时区偏移。是  <code>RFC 822</code>  或  <code>RFC 1036</code>  日期格式中的组成部分。</td>\n</tr>\n<tr>\n<td>%Z</td>\n<td>时区名称或时区名称缩写。如果没有时区则返回空字符串  <code>''</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"其他函数\"><a class=\"anchor\" href=\"#其他函数\">#</a> 其他函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>close(expr)</td>\n<td>用于关闭已经打开的文件或管道</td>\n</tr>\n<tr>\n<td>system(command)</td>\n<td>执行系统脚本命令，并返回脚本执行的退出状态</td>\n</tr>\n<tr>\n<td>getline</td>\n<td>读取下一行</td>\n</tr>\n<tr>\n<td>next</td>\n<td>处理下一行</td>\n</tr>\n<tr>\n<td>nextfile</td>\n<td>处理下一个文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"示例-4\"><a class=\"anchor\" href=\"#示例-4\">#</a> 示例</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># close(expr) </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;while(\"cat emp.txt\" | getline)&#123;print $0&#125;close(\"emp.txt\")&#125;'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># system(command)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;system(\"ls -l\")&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># getline</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk '&#123;getline;print&#125;' emp.txt</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>002 李四 <span class=\"token number\">2000</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>004 赵六 <span class=\"token number\">2000</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>006 小丽 <span class=\"token number\">800</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN &#123;print \"输入：\";getline name;print name&#125;'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># next</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk '&#123;if($3&lt;2000)next;print&#125;' emp.txt</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>002 李四 <span class=\"token number\">2000</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>003 王五 <span class=\"token number\">3000</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>004 赵六 <span class=\"token number\">2000</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># nextfile</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk '&#123;if($3==2000) nextfile;print&#125;' emp.txt file</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>001 张三 <span class=\"token number\">1000</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>xxx is a hanhan. ^_^</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>are you kidding?</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>I think <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>My phone number is <span class=\"token number\">1872272</span>****.</pre></td></tr></table></figure><h3 id=\"自定义函数\"><a class=\"anchor\" href=\"#自定义函数\">#</a> 自定义函数</h3>\n<ul>\n<li>函数定义</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> 函数名<span class=\"token punctuation\">(</span>参数1, 参数2, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>???+ quote<br />\n- 函数名必须以字母开始，可以由字母、数字、下划线组成，不能使用保留字<br />\n - 函数体语句之间必须以分号分隔<br />\n - 函数可以有返回值，也可以没有，如果需要返回值，则必须在大括号里使用  <code>return</code>  关键字</p>\n<ul>\n<li>函数调用</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 调用无参函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fun_name </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 调用有参数的函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fun_name<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">[</span>,arg2<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 调用有返回值的函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>var <span class=\"token operator\">=</span> fun_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>函数在  <code>BEGIN</code>  , <code>主体</code> ， <code>END</code>  中均可调用</p>\n</blockquote>\n<h4 id=\"示例-5\"><a class=\"anchor\" href=\"#示例-5\">#</a> 示例</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 无参数函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'BEGIN&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfun1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-name function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tprint <span class=\"token string\">\"this is a function!\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>this is a function!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre># 有参数函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfun2<span class=\"token punctuation\">(</span><span class=\"token number\">10,20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> fun2<span class=\"token punctuation\">(</span>num1,num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tprint <span class=\"token string\">\"函数执行的结果是：\"</span>num1+num2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>函数执行的结果是：30</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre># 有返回值函数</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>[root@localhost ~]# awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tres <span class=\"token operator\">=</span> fun3<span class=\"token punctuation\">(</span><span class=\"token number\">10,20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tprint <span class=\"token string\">\"num1+num2的和是：\"</span>res</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">function</span> fun3<span class=\"token punctuation\">(</span>num1,num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> num1+num2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span>'</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>num1+num2的和是：30</pre></td></tr></table></figure><h2 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h2>\n<p>=== &quot;(1)&quot;<br />\n 用 <code>awk</code>  命令输出 1-100 的偶数和</p>\n<p>=== &quot;(2)&quot;<br />\n 打印文件中第 20 列之后的内容</p>\n<p>=== &quot;(3)&quot;<br />\n 去除文件中的空行（分别使用 <code>grep</code> 、 <code>sed</code> 、 <code>awk</code>  命令实现）</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt\nYou and me.\nxxx is a hanhan. ^_^\nlongzhaoqianwowudunjiu.\n\nHe can speak english.\nAre you kidding?\n\nI think ...\nyouoy abba ccccc ddd\nMy phone number is 1872272****.\nvvv\n```\n</code></pre>\n<p>=== &quot;(4)&quot;<br />\n 打印文件中的空行的行号</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt \na\nb\nc\n\n\nd\ne\n\nf\n```\n</code></pre>\n<p>=== &quot;(5)&quot;<br />\n 去除文件中的重复行</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt \nYou and me.\nxxx is a hanhan. ^_^\nxxx is a hanhan. ^_^\nxxx is a hanhan. ^_^\nlongzhaoqianwowudunjiu.\nHe can speak english.\nAre you kidding?\nHe can speak english.\nyouoy abba ccccc ddd\nMy phone number is 1872272****.\nxxx is a hanhan. ^_^\n```\n</code></pre>\n<p>=== &quot;(6)&quot;<br />\n 统计文件中第二列出现的次数大于 1 的次数和科目</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt\n01 python 99\n02 go 80\n03 c++ 88\n04 java 77\n05 go 88\n06 shell 89\n07 java 70\n08 java 88\n\n# 结果示例：\n2 go\n3 java\n```\n</code></pre>\n<p>=== &quot;(7)&quot;<br />\n 统计文件中每个单词出现的次数</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt \nyou and you \nyou and me \nhello \n\n# 结果示例：\nyou: 3\nand: 2\nhello: 1\n```\n</code></pre>\n<p>=== &quot;(8)&quot;<br />\n 统计文件中每一行数字出现的次数和整个文件中数字出现的总数</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt \na123\nwo4r2d0\nab8cd\nsss\n\n# 结果示例：\nline1: 3\nline2: 3\nline3: 1\nline4: 0\ntotal: 7 \n```\n</code></pre>\n<p>=== &quot;(9)&quot;<br />\n 将文件中的列转置成行</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt \njob salary\nc++ 13\njava 14\nphp 12\n\n# 结果示例：\njob c++ java php\nsalary 13 14 12\n```\n</code></pre>\n<p>=== &quot;(10)&quot;<br />\n 将文件中的内容按照结果示例输出</p>\n<pre><code>```shell\n[root@localhost ~]# cat file.txt \n111:13443\n222:13211\n111:13643\n333:12341\n222:12123\n\n# 结果示例：\n[111]\n13443\n13643\n[222]\n13211\n12123\n[333]\n12341\n```\n</code></pre>\n",
            "tags": [
                "学习",
                "Linux",
                "linux"
            ]
        }
    ]
}